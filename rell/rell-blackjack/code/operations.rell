/**************
 * Operations *
 **************/

operation register(pubkey, username: name){
  require( is_signer(pubkey) );
  require(not exists(user@?{.username == username}), "Username already exists");
  create user(pubkey, username);
}

operation look_for_game(user, nop: byte_array){
  require( is_signer(user.pubkey) );
  create user_looking_for_game(user, op_context.last_block_time);
}

operation stop_looking_for_game(user, nop: byte_array){
  require( is_signer(user.pubkey) );
  delete user_looking_for_game @? {user};
}

operation join_game(user, target_user:user, nop: byte_array){
  require( is_signer(user.pubkey) );
  require_not_empty(user_looking_for_game @? {target_user});
  delete user_looking_for_game @? {target_user};
  
  if ((user_looking_for_game @* {user} limit 1).size() > 1){
    delete user_looking_for_game @? {user};
  }
  val now = op_context.last_block_time;
  val game = create game(
    player_1 = target_user, 
    player_2 = user, 
    timestamp = now
  );
  
  create player_money(
    game,
    user = target_user
  );
  create player_money(
    game,
    user
  );
  
  create game_state(game);

  for (i in range(52)) {
    create deck_card(game, card_index = i);
  }
}

operation post_message (game, user, message: text, nop: byte_array) {
  require( is_signer(user.pubkey) );
  create message (game, user, message, op_context.last_block_time);
}

operation resign(game, user, nop: byte_array){
  require( is_signer(user.pubkey) );
  require(game.finished == -1);
  var winner = 0;
  if(user == game.player_1) winner = 2;
  if(user == game.player_2) winner = 1;
  update game(winner = winner, finished = op_context.last_block_time, reason = 1);
}

operation post_card_fragments(game, user, fragments: list<text>){
  require( is_signer(user.pubkey) );
  for(i in range(fragments.size())){
    create card_secret (
      game,
      user,
      card_index = i,
      fragment = fragments[i]
    );
  }
}

operation post_card_secret(game, user, card_index: integer, decrypt_key: text){
  require( is_signer(user.pubkey) );
  val card = card_secret@{game, user, card_index};
  update card(decrypt_key);
}

operation post_card_reveal(game, user, card_index: integer, reveal_value: text){
  require( is_signer(user.pubkey) );
  
  val card = deck_card@{game, card_index};
  
  if(card.reveal_value != "" and card.reveal_value != reveal_value) update card(reveal_value = "skull");
  else if(card.reveal_value == ""){
    update card(reveal_value);
    val game_state = game_state@{game};
    if(game_state.phrase == 0){
      if((player_bet@*{game, .round == game_state.round}).size() == 2){
        var ready = true;
        val all_cards = card_in_player_hand@*{game, .round == game_state.round};
        for(card_in_hand in all_cards){
          if(card_in_hand.is_open){
            val card_in_deck = deck_card@{game, .card_index == card_in_hand.card_index};
            if(card_in_deck.reveal_value == "" or card_in_deck.reveal_value == "skull") ready = false;
          }
        }
      
        if(ready) update game_state(phrase = 1);
      }
    }
    else if (game_state.phrase == 3){
      dealer_automated_action(game, game_state, game_state.round);
    }
    else if(game_state.phrase > 0){
      val player_index = game_state.phrase;
      val player_hand_value = calculate_player_hand_value(game, game_state.round, player_index);
    
      if(player_hand_value >= 21) {
        update game_state(phrase = player_index + 1);
        if(player_index == 2) {
          update card_in_player_hand@{
            game, 
            .round == game_state.round, 
            .is_open == false, 
            .player_index == 0
          }( is_open = true );
        }
      }
    }
  }
}

function dealer_automated_action(game, game_state, round:integer){
  val dealer_hand_value = calculate_player_hand_value(game, game_state.round, 0);
  if(dealer_hand_value >= 17) {
    end_of_round_scoring(game, game_state);
  }
  else{
    val player_1_hand_value = calculate_player_hand_value(game, game_state.round, 1);
    val player_2_hand_value = calculate_player_hand_value(game, game_state.round, 2);
    if(player_1_hand_value > 21 and player_2_hand_value > 21){
      end_of_round_scoring(game, game_state);
    }
    else{
      deal_card_to_player(game, game_state, round, 0, true);
    }
  }
}

function end_of_round_scoring(game, game_state){
  val dealer_hand_value = calculate_player_hand_value(game, game_state.round, 0);
  for(player_index_0 in range(2)){
    val user = if (player_index_0 == 0) game.player_1 else game.player_2;
    val player_bet = player_bet @ {game, .round == game_state.round, user};
    val player_money = player_money @ {game, user};
    val player_hand_value = calculate_player_hand_value(game, game_state.round, player_index_0 + 1);
    
    update player_money(amount = .amount + player_bet.amount * calculate_player_winning(player_hand_value, dealer_hand_value));
  }
  
  update game_state(phrase = 4);
}

function end_game_scoring(game){
  val player_1_money = player_money@{game, .user == game.player_1};
  val player_2_money = player_money@{game, .user == game.player_2};
  var winner = 0;
  if(player_1_money.amount > player_2_money.amount) winner = 1;
  if(player_1_money.amount < player_2_money.amount) winner = 2;
  update game(winner = winner, finished = op_context.last_block_time, reason = 0);
}

operation ready_for_next_round(game, user, nop: byte_array){
  require( is_signer(user.pubkey) );
  val game_state = game_state@{game};
  require(game_state.phrase > 3);
  if(game_state.phrase == 4) update game_state(phrase = 5);
  else if(game_state.phrase == 5){
    if(game_state.top_card_index < 47){
      update game_state(round = .round + 1, phrase = 0);
    }
    else{
      end_game_scoring(game);
    }
  }
}

operation pass_shuffled_deck (game, user, deck: list<text>) {
  require( is_signer(user.pubkey) );
  val game_state = require_not_empty(game_state @? {game});
  
  require(game_state.phrase < 0);
  if(game_state.phrase == -2 or game_state.phrase == -4) require(user == game.player_2);
  if(game_state.phrase == -1 or game_state.phrase == -3) require(user == game.player_1);
  
  for (i in range(52)) {
    val deck_card = deck_card@?{game, .card_index == i};
    update deck_card(encrypted = deck[i]);
  }
  update game_state(phrase = .phrase+1);
}

operation place_bet(game, user, round: integer, amount: integer){
  require( is_signer(user.pubkey) );
  val player_money = player_money@{game, user};
  require(player_money.amount >= amount);
  create player_bet(game, user, round, amount);
  update player_money(amount = .amount - amount);
  
  if(
    exists(player_bet@?{game, round, .user == game.player_1}) 
    and exists(player_bet@?{game, round, .user == game.player_2})
    ){
    val game_state = game_state@{game};
    deal_card_initial(game, round);
  }
}

function deal_card_initial(game, round:integer){
  val game_state = game_state@{game};
    for(hand_index in range(2)){
      for(player_index in range(3)){
        deal_card_to_player(game, game_state, round, player_index, hand_index != 0 or player_index != 0);
      }
    }
}

operation player_hit(game, user, nop: byte_array){
  require( is_signer(user.pubkey) );
  val game_state = game_state@{game};
  require((game.player_1 == user and game_state.phrase == 1) or (game.player_2 == user and game_state.phrase == 2));
  val round = game_state.round;
  val player_index = if(game.player_1 == user) 1 else 2;
  
  var value = calculate_player_hand_value(game, round, player_index);
  
  require(value < 21);
  
  deal_card_to_player(game, game_state, round, player_index, true);
}

function deal_card_to_player(game, game_state, round: integer, player_index: integer, is_open: boolean){
  if(game_state.top_card_index > 51){
    end_of_round_scoring(game, game_state);
  }
  else{
    create card_in_player_hand(
      game, 
      round,
      card_index = game_state.top_card_index,
      player_index,
      is_open
    );
  
    update game_state(top_card_index = .top_card_index + 1);
  }
}

operation player_stand(game, user, nop: byte_array){
  require( is_signer(user.pubkey) );
  val game_state = game_state@{game};
  require((game.player_1 == user and game_state.phrase == 1) or (game.player_2 == user and game_state.phrase == 2));
  if(game_state.phrase == 2){
    update card_in_player_hand@{game, .round == game_state.round, .is_open == false, .player_index == 0}
    (
      is_open = true
    );
  }
  update game_state(phrase = .phrase + 1);
}