{"version":3,"sources":["blockchain/blockchain.js","Routes/Login/Login.js","Routes/Login/index.js","blockchain/api.js","Redux/helpers.js","Redux/lobby/lobby.js","Routes/Lobby/Lobby.js","Routes/Lobby/index.js","Redux/game/game.js","Routes/Game/Components/BetSlider.js","Routes/Game/Game.js","Routes/Game/index.js","Redux/config/config.js","Routes/NodeLocationPrompt/NodeLocationPromp.js","Routes/NodeLocationPrompt/index.js","Routes/index.js","Redux/reducers.js","App.js","Redux/store.js","serviceWorker.js","index.js","blockchain/game-logic.js","blockchain/auth.js"],"names":["blockchain","gtx","init","nodeUri","a","console","log","rest","pcl","restClient","createRestClient","gtxClient","createClient","Buffer","from","query","result","error","getGtx","Login","state","username","privKey","loginPrivKey","updating","register","e","preventDefault","setState","auth","user","isEmpty","alert","login","props","history","push","onFieldChanged","target","name","value","isLoggedIn","this","Row","className","style","height","Col","paddingBottom","sm","md","lg","xl","Card","CardBody","FormGroup","Label","Input","type","readOnly","placeholder","row","Button","color","tag","Link","to","Form","onSubmit","InputGroup","required","onChange","InputGroupAddon","addonType","minWidth","disabled","React","Component","withRouter","lookForGame","getCurrentUser","id","pubKey","rq","newTransaction","addOperation","crypto","randomBytes","sign","postAndWaitConfirmation","stopLookingForGame","joinGame","userId","postMessage","gameId","message","resign","getGameStatus","game","passShuffledDeck","deck","placeBet","round","amount","hit","stand","getCardFragments","postCardFragments","fragments","postCardSecret","cardIndex","decrypt","postCardReveal","cardReveal","readyForNextRound","PENDING","action","REJECTED","FULFILLED","ACTION_TYPES","initialState","loading","waitList","gameList","sending","isLookingForGame","reducer","payload","wait_list","game_list","some","Lobby","initialized","logout","composeRedirectToGameHandler","findGame","quitFindGame","composeJoinHandler","reset","getLobbyStatus","debounce","prevProps","prevState","currentUser","newGame","find","player_1","player_2","onClick","Table","responsive","borderless","striped","hover","map","waiter","key","moment","timestamp","fromNow","valign","player_1_name","player_2_name","size","offset","Progress","animated","mapDispatchToProps","api","connect","lobby","isWaitingForGameStart","PENDING_TYPES","PASS_SHUFFLED_DECK","PLACE_BET","isPlayer1","gameInfo","isPlayer2","performAutomatedResponse","dispatch","appGameState","gameState","pendingActions","cardCodewords","performAutomatedShufflingPhrase","self","getSelf","cards_in_player_hand","playerHand","cardInHand","is_open","card_index","reveal_value","keyPairs","privateKey","card_decrypts","myPlayerIndex","decrypt_key","updateOpponentDecrypts","revealValue","decryptCardToName","phrase","game_state","receivedDeck","shuffleAndPassDeck","encryptAndPassDeck","isNew","Promise","resolve","reject","initialShuffle","shuffleDeck","card","encrypted","encryptCards","loadingGameStatus","loadingCardFragments","messages","cardsInPlayerHand","handsValue","playerBets","playerMonies","pendingMessages","fulfilledMessages","resigning","isReadyForNextRound","meta","player_monies","player_bets","hands_value","msg","filter","bet","player","createCardCodeWords","index","length","expectedHandSize","top_card_index","expectedPhrase","BetSlider","Math","min","maxValue","axis","x","xmax","xmin","styles","active","backgroundColor","PureComponent","Game","onMessageChanged","Number","match","params","leaveGame","confirmResign","window","confirm","renderBettingPanel","playerMoney","playerBet","buttonDisabled","renderGameView","top","marginRight","width","alt","src","position","left","transform","fontWeight","fontSize","textShadow","Array","_","playerIndex","playerId","playerName","isCurrentPlayer","currentPlayerIsActivePlayer","playerHasUnknownCard","bottom","marginLeft","renderLoader","right","refs","scrollTop","scrollHeight","messagesToShow","finished","background","winner","maxHeight","overflow","ref","wordBreak","author_name","autoComplete","getState","newGameState","Date","getTime","data","cachedData","JSON","parse","localStorage","getItem","dataCached","loadGame","config","setItem","stringify","cardCodewordFragments","nodeLocation","NodeLocationPrompt","location","success","registerLocation","initializeNodeLocation","cachedLocation","loginFromSession","setNodeLocation","uri","PrivateRoute","component","render","Routes","basename","path","combineReducers","reduxStore","createStore","reducers","composeWithReduxDevTools","applyMiddleware","reduxThunk","promiseMiddleware","App","store","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","opponent","cardNames","createConfig","selfAsBuffer","createPlayer","buffer","toString","keyPair","cachedSelf","cachedConfig","opponentFragments","createDeck","fragment","decrypts","encryptDeck","shuffle","cardCount","decryptDeck","cardEncrypted","cardDecrypted","decryptCard","findIndex","cardCodeword","equals","util","makeKeyPair","session","sessionStorage","privKeyAsText","createPublicKey","pubKeyAsText","user_pubkey","removeItem"],"mappings":"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","file":"static/js/main.3e6a0622.chunk.js","sourcesContent":["import pcl from 'postchain-client';\n\nconst blockchain = (function () {\n  let gtx;\n\n  const init = async nodeUri => {\n    try {\n      console.log(nodeUri);\n      const rest = pcl.restClient.createRestClient(nodeUri, '78967baa4768cbcef11c508326ffb13a956689fcb6dc3ba17f4b895cbb1577a3', 5)\n\n      gtx = pcl.gtxClient.createClient(\n        rest,\n        Buffer.from(\n          '78967baa4768cbcef11c508326ffb13a956689fcb6dc3ba17f4b895cbb1577a3',\n          'hex'\n        ),\n        []\n      );\n      const result = await gtx.query('ping', {});\n      console.log('Postchain client initialized.');\n      return result;\n\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  const getGtx = () => gtx;\n\n  return {\n    init,\n    getGtx\n  }\n})();\n\nexport default blockchain;","import React from 'react';\nimport {\n  Row, Col, Card, CardBody, FormGroup, Form, Button, Input, Label, InputGroup, InputGroupAddon\n} from 'reactstrap';\nimport { Link, withRouter } from 'react-router-dom';\nimport { isEmpty } from 'lodash';\n\nimport auth from '../../blockchain/auth';\n\nclass Login extends React.Component {\n  state = {\n    username: '',\n    privKey: '',\n    loginPrivKey: '',\n    updating: false\n  }\n\n  componentDidMount() {\n    if (auth.isLoggedIn()) this.props.history.push('/lobby');\n  }\n\n  register = async e => {\n    e.preventDefault();\n    if (!this.state.username) return;\n    this.setState({ updating: true });\n    const user = await auth.register(this.state.username);\n\n    if (isEmpty(user)) alert(\"Operation failed! Please try again.\");\n\n    this.setState({\n      privKey: user.privKey,\n      updating: false\n    });\n  }\n\n  login = async e => {\n    e.preventDefault();\n    if (!this.state.loginPrivKey) return;\n    this.setState({ updating: true });\n    const user = await auth.login(this.state.loginPrivKey);\n\n    if (isEmpty(user)) {\n      alert(\"Unable to login! Invalid privKey or user does not exist.\");\n      this.setState({ updating: false });\n    }\n    else {\n      this.props.history.push('/lobby');\n    }\n  }\n\n  onFieldChanged = e => this.setState({ [e.target.name]: e.target.value });\n\n  render() {\n    const { privKey, username, updating, loginPrivKey } = this.state;\n\n    return (\n      <Row className=\"justify-content-center align-items-center\" style={{ height: '100vh' }}>\n        <Col className=\"m-auto\" style={{ paddingBottom: '20vh' }} sm=\"10\" md=\"6\" lg=\"5\" xl=\"4\">\n          {\n            !privKey ? (\n              <>\n                <h1 className=\"mb-3\">Welcome!</h1>\n                <Form onSubmit={this.login} className=\"row\">\n                  <FormGroup className=\"col mb-0 flex-grow-1\">\n                    <InputGroup>\n                      <Input type=\"password\" name=\"loginPrivKey\" required placeholder=\"Private Key...\" value={loginPrivKey} onChange={this.onFieldChanged} />\n                      <InputGroupAddon addonType=\"append\">\n                        <Button style={{ minWidth: '7em' }} className=\"btn-block\" color=\"primary\" type=\"submit\" disabled={updating}>Login</Button>\n                      </InputGroupAddon>\n                    </InputGroup>\n                  </FormGroup>\n                </Form>\n                <div className=\"text-center my-3\">-- or --</div>\n                <Form onSubmit={this.register} className=\"row\">\n                  <FormGroup className=\"col mb-0 flex-grow-1\">\n                    <InputGroup>\n                      <Input type=\"text\" readOnly={privKey} required name=\"username\" placeholder=\"Username...\" value={username} onChange={this.onFieldChanged} />\n                      <InputGroupAddon addonType=\"append\">\n                        <Button style={{ minWidth: '7em' }} className=\"btn-block\" color=\"primary\" type=\"submit\" disabled={updating}>Register</Button>\n                      </InputGroupAddon>\n                    </InputGroup>\n                  </FormGroup>\n                </Form>\n              </>)\n              : (\n                <>\n                  <Card>\n                    <CardBody>\n                      <FormGroup>\n                        <Label>Username:</Label>\n                        <Input type=\"text\" readOnly name=\"username\" placeholder=\"Username...\" value={username} />\n                      </FormGroup>\n                      {\n                        privKey && (<>\n                          <FormGroup>\n                            <Label>Private Key (Save this to login):</Label>\n                            <Input type=\"textarea\" name=\"privKey\" row=\"3\" value={privKey} readOnly />\n                          </FormGroup>\n                        </>)\n                      }\n                    </CardBody>\n                  </Card>\n                  <div className=\"d-flex justify-content-center mt-3\">\n                    <Button color=\"primary\" tag={Link} to=\"/lobby\">Let's Play!</Button>\n                  </div>\n                </>\n              )\n          }\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default withRouter(Login);","import Login from './Login';\n\nexport default Login;","import blockchain from './blockchain';\nimport crypto from 'crypto';\nimport auth from './auth';\n\nexport const lookForGame = () => {\n  if (!auth.isLoggedIn()) return false;\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"look_for_game\", id, crypto.randomBytes(32));\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const stopLookingForGame = () => {\n  if (!auth.isLoggedIn()) return false;\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"stop_looking_for_game\", id, crypto.randomBytes(32));\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const joinGame = (userId) => {\n  if (!auth.isLoggedIn()) return false;\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"join_game\", id, userId, crypto.randomBytes(32));\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const postMessage = (gameId, message) => {\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"post_message\", gameId, id, message, crypto.randomBytes(32));\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const resign = (gameId) => {\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"resign\", gameId, id, crypto.randomBytes(32));\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const getLobbyStatus = () => blockchain.getGtx().query(\"get_lobby_status\", {});\n\nexport const getGameStatus = (gameId) => {\n  return blockchain.getGtx().query(\"get_game_status\", { game: gameId });\n}\n\nexport const passShuffledDeck = (gameId, deck) => {\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"pass_shuffled_deck\", gameId, id, deck);\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const placeBet = (gameId, round, amount) => {\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"place_bet\", gameId, id, round, amount);\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const hit = (gameId) => {\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"player_hit\", gameId, id, crypto.randomBytes(32));\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const stand = (gameId) => {\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"player_stand\", gameId, id, crypto.randomBytes(32));\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const getCardFragments = (gameId) => {\n  return blockchain.getGtx().query(\"get_card_fragments\", { game: gameId });\n}\n\nexport const postCardFragments = (gameId, fragments) => {\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"post_card_fragments\", gameId, id, fragments);\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const postCardSecret = (gameId, cardIndex, decrypt) => {\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"post_card_secret\", gameId, id, cardIndex, decrypt);\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const postCardReveal = (gameId, cardIndex, cardReveal) => {\n  console.log(`Posting cardReveal: ${cardReveal}`)\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"post_card_reveal\", gameId, id, cardIndex, cardReveal);\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const readyForNextRound = (gameId) => {\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"ready_for_next_round\", gameId, id, crypto.randomBytes(32));\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}","export const PENDING = action => `${action}_PENDING`;\nexport const REJECTED = action => `${action}_REJECTED`;\nexport const FULFILLED = action => `${action}_FULFILLED`;","import * as api from '../../blockchain/api';\nimport auth from '../../blockchain/auth';\nimport {\n  PENDING,\n  REJECTED,\n  FULFILLED\n} from '../helpers';\n\nexport const ACTION_TYPES = {\n  RESET: 'lobby/RESET',\n  FETCH_STATUS: 'lobby/FETCH_STATUS',\n  LOOK_FOR_GAME: 'lobby/LOOK_FOR_GAME',\n  STOP_LOOKING_FOR_GAME: 'lobby/STOP_LOOKING_FOR_GAME',\n  JOIN_GAME: 'lobby/JOIN_GAME',\n}\n\nexport const lookForGame = () => ({\n  type: ACTION_TYPES.LOOK_FOR_GAME,\n  payload: api.lookForGame()\n})\n\nexport const stopLookingForGame = () => ({\n  type: ACTION_TYPES.STOP_LOOKING_FOR_GAME,\n  payload: api.stopLookingForGame()\n})\n\nexport const joinGame = (userId) => ({\n  type: ACTION_TYPES.JOIN_GAME,\n  payload: api.joinGame(userId)\n})\n\nexport const getLobbyStatus = () => ({\n  type: ACTION_TYPES.FETCH_STATUS,\n  payload: api.getLobbyStatus()\n})\n\nexport const reset = () => ({\n  type: ACTION_TYPES.RESET\n})\n\nconst initialState = {\n  loading: false,\n  waitList: [],\n  gameList: [],\n  sending: false,\n  isLookingForGame: false,\n  error: null\n}\n\n\nconst reducer = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case PENDING(ACTION_TYPES.FETCH_STATUS):\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case FULFILLED(ACTION_TYPES.FETCH_STATUS):\n      const waitList = payload.wait_list;\n      const gameList = payload.game_list;\n      return {\n        ...state,\n        loading: false,\n        waitList,\n        gameList,\n        isLookingForGame: state.sending ? state.isLookingForGame : waitList.some(user => user.id === auth.getCurrentUser().id)\n      };\n    case REJECTED(ACTION_TYPES.FETCH_STATUS):\n      return {\n        ...state,\n        loading: false,\n        error: payload\n      }\n    case PENDING(ACTION_TYPES.LOOK_FOR_GAME):\n      return {\n        ...state,\n        sending: true,\n        isLookingForGame: true,\n        error: null\n      };\n    case PENDING(ACTION_TYPES.STOP_LOOKING_FOR_GAME):\n      return {\n        ...state,\n        sending: true,\n        isLookingForGame: false,\n        error: null\n      };\n    case FULFILLED(ACTION_TYPES.LOOK_FOR_GAME):\n    case FULFILLED(ACTION_TYPES.STOP_LOOKING_FOR_GAME):\n      return {\n        ...state,\n        sending: false\n      };\n    case REJECTED(ACTION_TYPES.LOOK_FOR_GAME):\n    case REJECTED(ACTION_TYPES.STOP_LOOKING_FOR_GAME):\n      return {\n        ...state,\n        sending: false,\n        isLookingForGame: state.waitList.some(user => user.id === auth.getCurrentUser().id),\n        error: payload\n      }\n    case PENDING(ACTION_TYPES.JOIN_GAME):\n      return {\n        ...state,\n        sending: true,\n        error: null\n      };\n    case REJECTED(ACTION_TYPES.JOIN_GAME):\n      return {\n        ...state,\n        sending: false,\n        error: payload\n      };\n    case ACTION_TYPES.RESET:\n      return initialState;\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Button, Table, Row, Col, Card, CardBody, Progress } from 'reactstrap';\n\nimport { getLobbyStatus, lookForGame, stopLookingForGame, joinGame, reset } from '../../Redux/lobby/lobby';\nimport auth from '../../blockchain/auth';\nimport moment from 'moment';\nimport debounce from 'debounce';\n\nclass Lobby extends React.Component {\n  state = {\n    initialized: false\n  }\n\n  componentDidMount() {\n    this.props.reset();\n    this.getLobbyStatus = debounce(this.props.getLobbyStatus, 1000);\n    this.getLobbyStatus();\n  }\n\n  componentWillUnmount() {\n    if (this.props.isLookingForGame) this.props.stopLookingForGame();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.loading && !this.props.loading) {\n      if (!this.state.initialized) this.setState({ initialized: true });\n      this.getLobbyStatus();\n    }\n\n    const { currentUser, gameList } = this.props;\n    if (prevProps.gameList !== gameList) {\n      const newGame = gameList.find(game => game.player_1 === currentUser.id || game.player_2 === currentUser.id);\n      if (newGame) this.props.history.push(`/game/${newGame.id}`);\n    }\n  }\n\n  logout = () => {\n    auth.logout();\n    this.props.history.push('/');\n  }\n\n  composeRedirectToGameHandler = gameId => () => this.props.history.push(`/game/${gameId}`);\n\n  findGame = () => this.props.lookForGame();\n  quitFindGame = () => this.props.stopLookingForGame();\n  composeJoinHandler = userId => () => this.props.joinGame(userId);\n\n  render() {\n    const { waitList, gameList, currentUser, isLookingForGame, sending } = this.props;\n    return (\n      <>\n        <div className=\"d-flex justify-content-end align-items-end py-4\">\n          <div className=\"d-flex align-items-baseline\">\n            <div>Welcome, {currentUser.username}!</div>\n            <Button\n              color=\"outline-danger\"\n              className=\"ml-3\"\n              onClick={this.logout}>\n              Logout\n            </Button>\n          </div>\n        </div>\n        <Row>\n          {\n            !this.state.initialized\n              ? <Col md={{ size: 4, offset: 4 }} className=\"pt-5\"><Progress animated value={100} /></Col>\n              : (\n                <>\n                  <Col lg=\"6\" className=\"mb-3 mb-lg-0\">\n                    <Card style={{ height: '100%' }}>\n                      <CardBody>\n                        <div className=\"d-flex justify-content-between align-items-baseline\">\n                          <h4>Wait List</h4>\n                          {\n                            this.state.initialized && (\n                              isLookingForGame ? (\n                                <Button\n                                  color=\"outline-danger\"\n                                  onClick={this.quitFindGame}\n                                  disabled={sending}>\n                                  Stop Finding\n                      </Button>\n                              ) : (\n                                  <Button\n                                    color=\"primary\"\n                                    onClick={this.findGame}\n                                    disabled={sending}>\n                                    Find Game\n                          </Button>\n                                )\n                            )\n                          }\n                        </div>\n\n                        <hr />\n                        <Table responsive borderless striped hover>\n                          <tbody>\n                            {waitList.map(waiter => <tr key={waiter.id}>\n                              <td>{moment(waiter.timestamp).fromNow()}</td>\n                              <td valign=\"middle\">{waiter.username}</td>\n                              <td className=\"text-right\">{waiter.id !== currentUser.id && <Button color=\"outline-primary\" onClick={this.composeJoinHandler(waiter.id)}>Join</Button>} </td>\n                            </tr>)}\n                          </tbody>\n                        </Table>\n                      </CardBody>\n                    </Card>\n                  </Col>\n                  <Col lg=\"6\">\n                    <Card style={{ height: '100%' }}>\n                      <CardBody>\n                        <h4>Active Games</h4>\n                        <hr />\n                        <Table responsive borderless striped hover>\n                          <tbody>\n                            {gameList.map(game => <tr key={game.id}>\n                              <td>{moment(game.timestamp).fromNow()}</td>\n                              <td>{game.player_1_name}</td>\n                              <td valign=\"middle\">{game.player_2_name}</td>\n                              <td className=\"text-right\">\n                                {\n                                  game.player_1 !== currentUser.id && game.player_2 !== currentUser.id\n                                    ? <Button color=\"outline-primary\" onClick={this.composeRedirectToGameHandler(game.id)}>Spectate</Button>\n                                    : <Button color=\"primary\" onClick={this.composeRedirectToGameHandler(game.id)}>Play</Button>\n                                } </td>\n                            </tr>)}\n                          </tbody>\n                        </Table>\n                      </CardBody>\n                    </Card>\n                  </Col>\n                </>\n              )\n          }\n        </Row>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  reset,\n  getLobbyStatus,\n  lookForGame,\n  stopLookingForGame,\n  joinGame\n}\nconst mapAppStateToProps = ({ lobby }) => {\n  const { loading, waitList, gameList, sending, isLookingForGame, isWaitingForGameStart, error } = lobby;\n  return {\n    loading,\n    sending,\n    waitList,\n    gameList,\n    isWaitingForGameStart,\n    isLookingForGame,\n    error,\n    currentUser: auth.getCurrentUser()\n  }\n}\n\nexport default withRouter(connect(mapAppStateToProps, mapDispatchToProps)(Lobby));","import Lobby from './Lobby';\n\nexport default Lobby;","import { isEmpty } from 'lodash';\n\nimport * as api from '../../blockchain/api';\nimport auth from '../../blockchain/auth';\nimport {\n  PENDING,\n  REJECTED,\n  FULFILLED\n} from '../helpers';\n\nimport {\n  newGame,\n  loadGame,\n  createCardCodeWords,\n  initialShuffle,\n  shuffleDeck,\n  encryptCards,\n  getSelf,\n  updateOpponentDecrypts,\n  decryptCardToName\n} from '../../blockchain/game-logic';\n\nexport const ACTION_TYPES = {\n  RESET: 'game/RESET',\n  FETCH_STATUS: 'game/FETCH_STATUS',\n  FETCH_FRAGMENTS: 'game/FETCH_FRAGMENTS',\n  POST_MESSAGE: 'game/POST_MESSAGE',\n  PASS_SHUFFLED_DECK: 'game/PASS_SHUFFLED_DECK',\n  PLACE_BET: 'game/PLACE_BET',\n  READY_FOR_NEXT_ROUND: 'game/READY_FOR_NEXT_ROUND',\n  HIT: 'game/HIT',\n  STAND: 'game/STAND',\n  RESIGN: 'game/RESIGN'\n}\n\nexport const PENDING_TYPES = {\n  PASS_SHUFFLED_DECK: 'game/PASS_SHUFFLED_DECK',\n  PLACE_BET: 'game/PLACE_BET'\n}\n\nexport const getGameStatus = gameId => async (dispatch, getState) => {\n  const result = await dispatch({\n    type: ACTION_TYPES.FETCH_STATUS,\n    payload: api.getGameStatus(gameId)\n  });\n\n  const newGameState = result.value;\n  if (isPlayer1(newGameState.game) || isPlayer2(newGameState.game)) {\n    const state = getState().game;\n    performAutomatedResponse(dispatch, state, gameId, result.value);\n  }\n\n  return result;\n}\n\nexport const getCardFragments = gameId => async (dispatch, getState) => {\n  const result = await dispatch({\n    type: ACTION_TYPES.FETCH_FRAGMENTS,\n    payload: api.getCardFragments(gameId)\n  });\n\n  const data = result.value;\n  const state = getState().game;\n\n  const currentUser = auth.getCurrentUser();\n  var self = getSelf();\n  if (isEmpty(self)) {\n    const cachedData = JSON.parse(localStorage.getItem(`gameSecrets_${currentUser.id}`) || '{}');\n    const dataCached = !isEmpty(cachedData) && cachedData.gameId === state.game.id;\n    const data = dataCached\n      ? loadGame(cachedData.self, cachedData.config)\n      : newGame();\n    self = data.self;\n\n    if (!dataCached) {\n      localStorage.setItem(`gameSecrets_${currentUser.id}`, JSON.stringify({ self: data.self, config: data.config, gameId: state.game.id }));\n    }\n  }\n\n  if (isEmpty(data[state.myPlayerIndex])) {\n    // Our card fragments is not on the server\n    try {\n      api.postCardFragments(state.game.id, self.cardCodewordFragments);\n    }\n    catch (e) {\n      console.error(e);\n      alert('An error occured, please refresh the page to try again.');\n    }\n  }\n\n  return result;\n}\n\nexport const postMessage = (gameId, message) => ({\n  type: ACTION_TYPES.POST_MESSAGE,\n  payload: api.postMessage(gameId, message),\n  meta: {\n    msg: {\n      author_name: auth.getCurrentUser().username,\n      message,\n      timestamp: new Date().getTime()\n    }\n  }\n})\n\nexport const resign = (gameId) => ({\n  type: ACTION_TYPES.RESIGN,\n  payload: api.resign(gameId)\n})\n\nexport const placeBet = (gameId, round, amount) => ({\n  type: ACTION_TYPES.PLACE_BET,\n  payload: api.placeBet(gameId, round, amount),\n  meta: {\n    player: auth.getCurrentUser().id,\n    amount\n  }\n});\n\nexport const hit = gameId => (dispatch, getState) => {\n  const state = getState().game;\n  const expectedHandSize = state.cardsInPlayerHand[state.myPlayerIndex + 1].length + 1;\n  return dispatch({\n    type: ACTION_TYPES.HIT,\n    payload: api.hit(gameId),\n    meta: {\n      expectedHandSize\n    }\n  });\n}\n\nexport const stand = gameId => (dispatch, getState) => {\n  return dispatch({\n    type: ACTION_TYPES.STAND,\n    payload: api.stand(gameId),\n    meta: {\n      expectedPhrase: getState().game.phrase + 1\n    }\n  });\n}\n\n\nexport const readyForNextRound = gameId => ({\n  type: ACTION_TYPES.READY_FOR_NEXT_ROUND,\n  payload: api.readyForNextRound(gameId)\n})\n\nexport const reset = () => ({\n  type: ACTION_TYPES.RESET\n});\n\nexport const isPlayer1 = gameInfo => auth.getCurrentUser().id === gameInfo.player_1;\nexport const isPlayer2 = gameInfo => auth.getCurrentUser().id === gameInfo.player_2;\n\nconst performAutomatedResponse = (dispatch, appGameState, gameId, gameState) => {\n  if (\n    !appGameState.pendingActions[PENDING_TYPES.PASS_SHUFFLED_DECK]\n    && !isEmpty(appGameState.cardCodewords)) {\n    performAutomatedShufflingPhrase(dispatch, gameId, gameState);\n  }\n\n  var self = getSelf();\n  if (!isEmpty(self)) {\n    for (const playerHand of gameState.cards_in_player_hand) {\n      for (const cardInHand of playerHand) {\n        if (cardInHand.is_open && !gameState.deck[cardInHand.card_index].reveal_value) {\n          api.postCardSecret(gameId, cardInHand.card_index, self.keyPairs[cardInHand.card_index].privateKey);\n          if (!isEmpty(gameState.card_decrypts[1 - appGameState.myPlayerIndex][cardInHand.card_index].decrypt_key)) {\n            updateOpponentDecrypts(gameState.card_decrypts[1 - appGameState.myPlayerIndex]);\n            try {\n              const revealValue = decryptCardToName(gameState.deck, cardInHand.card_index);\n              api.postCardReveal(gameId, cardInHand.card_index, revealValue);\n            } catch (e) {\n              console.error(e);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nconst performAutomatedShufflingPhrase = async (dispatch, gameId, gameState) => {\n  const phrase = gameState.game_state.phrase;\n  const receivedDeck = gameState.deck;\n  if ((phrase === -4 && isPlayer2(gameState.game))\n    || (phrase === -3 && isPlayer1(gameState.game))) {\n    try {\n      await shuffleAndPassDeck(dispatch, gameId, receivedDeck, phrase === -4);\n    } catch (e) {\n      console.error(e);\n      alert('An error occured, please refresh the page to try again.')\n    }\n  }\n\n  if ((phrase === -2 && isPlayer2(gameState.game))\n    || (phrase === -1 && isPlayer1(gameState.game))) {\n    try {\n      await encryptAndPassDeck(dispatch, gameId, gameState.deck);\n    } catch (e) {\n      console.error(e);\n      alert('An error occured, please refresh the page to try again.')\n    }\n  }\n}\n\nconst shuffleAndPassDeck = async (dispatch, gameId, deck, isNew) => new Promise(async (resolve, reject) => {\n  try {\n    await dispatch({\n      type: ACTION_TYPES.PASS_SHUFFLED_DECK,\n      payload: api.passShuffledDeck(gameId, isNew ? initialShuffle() : shuffleDeck(deck.map(card => card.encrypted)))\n    });\n    resolve();\n  } catch (e) {\n    console.error(e);\n    reject();\n  }\n});\n\nconst encryptAndPassDeck = async (dispatch, gameId, deck) => new Promise(async (resolve, reject) => {\n  try {\n    await dispatch({\n      type: ACTION_TYPES.PASS_SHUFFLED_DECK,\n      payload: api.passShuffledDeck(gameId, encryptCards(deck.map(card => card.encrypted)))\n    });\n    resolve();\n  } catch (e) {\n    console.error(e);\n    reject();\n  }\n});\n\nconst initialState = {\n  myPlayerIndex: -1,\n  loadingGameStatus: false,\n  loadingCardFragments: false,\n  messages: [],\n  game: {},\n  gameState: {},\n  cardCodewords: [],\n  deck: [],\n  cardsInPlayerHand: [[], [], []],\n  handsValue: [0, 0, 0],\n  playerBets: [],\n  playerMonies: [],\n  pendingMessages: [],\n  fulfilledMessages: [],\n  pendingActions: {},\n  sending: false,\n  resigning: false,\n  isReadyForNextRound: false,\n  error: null\n}\n\n\nconst reducer = (state = initialState, { type, payload, meta }) => {\n  switch (type) {\n    case PENDING(ACTION_TYPES.FETCH_STATUS):\n      return {\n        ...state,\n        loadingGameStatus: true,\n        error: null\n      }\n    case FULFILLED(ACTION_TYPES.FETCH_STATUS):\n      const { game, messages, game_state, deck, player_monies, player_bets, cards_in_player_hand, hands_value } = payload;\n      const cardsInPlayerHand = cards_in_player_hand.map(\n        playerHand => playerHand.map(cardInHand => ({\n          ...cardInHand,\n          revealValue: deck[cardInHand.card_index].reveal_value\n        }))\n      );\n      const myPlayerIndex = game.player_1 === auth.getCurrentUser().id ? 0 : 1;\n      const isReadyForNextRound = game_state.phrase === 0 ? false : state.isReadyForNextRound;\n      return {\n        ...state,\n        myPlayerIndex,\n        loadingGameStatus: false,\n        game,\n        messages,\n        gameState: game_state,\n        deck,\n        cardsInPlayerHand,\n        handsValue: hands_value,\n        playerMonies: player_monies,\n        playerBets: player_bets,\n        fulfilledMessages: [],\n        isReadyForNextRound\n      }\n    case REJECTED(ACTION_TYPES.FETCH_STATUS):\n      return {\n        ...state,\n        loadingGameStatus: false,\n        error: payload\n      }\n    case PENDING(ACTION_TYPES.POST_MESSAGE):\n      return {\n        ...state,\n        sending: true,\n        error: null,\n        pendingMessages: [...state.pendingMessages, meta.msg]\n      }\n    case FULFILLED(ACTION_TYPES.POST_MESSAGE):\n      return {\n        ...state,\n        sending: false,\n        pendingMessages: state.pendingMessages.filter(msg => msg.message !== meta.msg.message),\n        fulfilledMessages: [...state.fulfilledMessages, meta.msg]\n      }\n    case REJECTED(ACTION_TYPES.POST_MESSAGE):\n      return {\n        ...state,\n        sending: false,\n        pendingMessages: state.pendingMessages.filter(msg => msg.message !== meta.msg.message),\n        error: payload\n      }\n    case PENDING(ACTION_TYPES.RESIGN):\n      return {\n        ...state,\n        resigning: true,\n        error: null\n      }\n    case ACTION_TYPES.RESET:\n      return initialState;\n    case REJECTED(ACTION_TYPES.RESIGN):\n      return {\n        ...state,\n        resigning: false,\n        error: payload\n      }\n    case PENDING(ACTION_TYPES.PASS_SHUFFLED_DECK):\n      return {\n        ...state,\n        pendingActions: {\n          ...state.pendingActions,\n          [PENDING_TYPES.PASS_SHUFFLED_DECK]: true\n        }\n      }\n    case FULFILLED(ACTION_TYPES.PASS_SHUFFLED_DECK):\n      return {\n        ...state,\n        pendingActions: {\n          ...state.pendingActions,\n          [PENDING_TYPES.PASS_SHUFFLED_DECK]: false\n        }\n      }\n    case PENDING(ACTION_TYPES.PLACE_BET):\n      return {\n        ...state,\n        pendingActions: {\n          ...state.pendingActions,\n          [PENDING_TYPES.PLACE_BET]: true\n        }\n      }\n    case REJECTED(ACTION_TYPES.PLACE_BET):\n      return {\n        ...state,\n        pendingActions: {\n          ...state.pendingActions,\n          [PENDING_TYPES.PLACE_BET]: false\n        }\n      }\n    case FULFILLED(ACTION_TYPES.PLACE_BET):\n      return {\n        ...state,\n        playerBets: [\n          ...state.playerBets.filter(bet => bet.id !== meta.player),\n          {\n            id: meta.player,\n            amount: meta.amount\n          }\n        ],\n        pendingActions: {\n          ...state.pendingActions,\n          [PENDING_TYPES.PLACE_BET]: false\n        }\n      }\n    case PENDING(ACTION_TYPES.FETCH_FRAGMENTS):\n      return {\n        ...state,\n        loadingCardFragments: true\n      };\n    case FULFILLED(ACTION_TYPES.FETCH_FRAGMENTS):\n      if (!isEmpty(payload[0]) && !isEmpty(payload[1]) && isEmpty(state.cardCodewords)) {\n        return {\n          ...state,\n          loadingCardFragments: false,\n          cardCodewords: createCardCodeWords(payload[1 - state.myPlayerIndex])\n        }\n      }\n      else return {\n        ...state,\n        loadingCardFragments: false,\n      };\n    case REJECTED(ACTION_TYPES.FETCH_FRAGMENTS):\n      return {\n        ...state,\n        loadingCardFragments: false\n      };\n    case PENDING(ACTION_TYPES.HIT):\n    case PENDING(ACTION_TYPES.STAND):\n      return {\n        ...state,\n        sending: true\n      };\n    case FULFILLED(ACTION_TYPES.HIT):\n      return {\n        ...state,\n        sending: false,\n        cardsInPlayerHand: state.cardsInPlayerHand.map(\n          (playerHand, index) => index !== (state.myPlayerIndex + 1) || playerHand.length === meta.expectedHandSize\n            ? playerHand\n            : [...playerHand, { card_index: state.gameState.top_card_index, revealValue: \"\" }]\n        )\n      };\n    case FULFILLED(ACTION_TYPES.STAND):\n      return {\n        ...state,\n        sending: false,\n        gameState: {\n          ...state.gameState,\n          phrase: meta.expectedPhrase\n        }\n      };\n    case REJECTED(ACTION_TYPES.HIT):\n    case REJECTED(ACTION_TYPES.STAND):\n      return {\n        ...state,\n        sending: false\n      };\n\n    case PENDING(ACTION_TYPES.READY_FOR_NEXT_ROUND):\n      return {\n        ...state,\n        isReadyForNextRound: true\n      };\n    case REJECTED(ACTION_TYPES.READY_FOR_NEXT_ROUND):\n      return {\n        ...state,\n        isReadyForNextRound: false\n      };\n    default: return state;\n  }\n}\n\nexport default reducer;","import React from 'react';\nimport Slider from 'react-input-slider';\nimport { Button } from 'reactstrap';\n\nexport default class BetSlider extends React.PureComponent {\n  state = {\n    value: Math.min(this.props.maxValue, 10)\n  }\n\n  render() {\n    return (\n      <div className=\"d-flex align-items-center\">\n        <span style={{ minWidth: '3em' }} className=\"mr-3 text-right\">${this.state.value}</span>\n        <Slider\n          axis=\"x\"\n          x={this.state.value}\n          onChange={({ x }) => this.setState({ value: x })}\n          xmax={this.props.maxValue}\n          xmin={1}\n          styles={{\n            active: {\n              backgroundColor: '#007bff'\n            }\n          }}\n        />\n        <Button color=\"primary\" disabled={this.props.disabled} className=\"ml-3\" onClick={() => this.props.onSubmit(this.state.value)}>OK</Button>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport { Row, Col, Form, Input, Button } from 'reactstrap';\nimport { withRouter } from 'react-router-dom';\nimport moment from 'moment';\nimport debounce from 'debounce';\nimport { connect } from 'react-redux';\nimport { isEmpty } from 'lodash';\n\nimport './Game.scss';\n\nimport {\n  isPlayer1,\n  isPlayer2,\n  getGameStatus,\n  postMessage,\n  resign,\n  placeBet,\n  getCardFragments,\n  hit,\n  stand,\n  readyForNextRound,\n  reset,\n  PENDING_TYPES\n} from '../../Redux/game/game';\nimport auth from '../../blockchain/auth';\nimport BetSlider from './Components/BetSlider';\n\nclass Game extends React.Component {\n  state = {\n    message: ''\n  }\n\n  componentDidMount() {\n    this.props.reset();\n    const gameId = Number(this.props.match.params.gameId);\n    this.getGameStatus = debounce(() => this.props.getGameStatus(gameId), 500);\n    this.getGameStatus();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.loadingGameStatus && !this.props.loadingGameStatus) {\n      this.getGameStatus();\n\n      if (prevProps.messages.length === 0) this.refs.messages.scrollTop = this.refs.messages.scrollHeight;\n\n      if (isEmpty(prevProps.game) && !isEmpty(this.props.game)) {\n        if (isPlayer1(this.props.game) || isPlayer2(this.props.game)) this.props.getCardFragments(this.props.game.id);\n      }\n    }\n\n    if (prevProps.loadingCardFragments && !this.props.loadingCardFragments) {\n      if (isEmpty(this.props.cardCodewords)) this.props.getCardFragments(this.props.game.id);\n    }\n  }\n\n  onMessageChanged = e => this.setState({\n    message: e.target.value\n  })\n\n  postMessage = e => {\n    e.preventDefault();\n    this.props.postMessage(Number(this.props.match.params.gameId), this.state.message);\n    this.setState({ message: '' });\n  }\n\n  leaveGame = () => this.props.history.push('/lobby')\n\n  confirmResign = () => {\n    if (window.confirm(\"Are you sure you want to resign?\")) {\n      this.props.resign(Number(this.props.match.params.gameId));\n    }\n  }\n\n  placeBet = amount => this.props.placeBet(\n    Number(this.props.match.params.gameId),\n    this.props.gameState.round,\n    amount\n  );\n\n  hit = () => this.props.hit(Number(this.props.match.params.gameId));\n  stand = () => this.props.stand(Number(this.props.match.params.gameId));\n  readyForNextRound = () => this.props.readyForNextRound(Number(this.props.match.params.gameId));\n\n  renderBettingPanel = (playerMoney, playerBet) => {\n    const { pendingActions } = this.props;\n    const buttonDisabled = pendingActions[PENDING_TYPES.PLACE_BET] || !!playerBet;\n\n    return <BetSlider onSubmit={this.placeBet} disabled={buttonDisabled} maxValue={Math.min(50, playerMoney)} />\n  }\n\n  renderGameView = (currentUser) => {\n    const { cardsInPlayerHand, playerBets, playerMonies, game, gameState, handsValue, isReadyForNextRound, sending } = this.props;\n    return (\n      <div className=\"d-flex flex-column\" style={{ height: '100%' }}>\n        <div id=\"dealer-zone\" className=\"flex-grow-1 d-flex flex-column\">\n          <div className=\"text-center\">Deck: {52 - gameState.top_card_index} cards left</div>\n          <div className=\"d-flex flex-grow-1 flex-row-reverse justify-content-center align-items-start position-relative\">\n            {\n              gameState.phrase === 0\n                ? <h3 className=\"d-flex align-items-center\" style={{ height: '100%' }}><div className=\"text-center\">Round {gameState.round}<br />Place your bet</div></h3>\n                : cardsInPlayerHand[0].map((card, index) => <img key={card.card_index} className=\"game-card\" style={{ top: `${index * 30}px`, marginRight: `${index === 0 ? 0 : -80}px` }} width=\"100\" alt={card.revealValue || 'back'} src={`/images/cards/${card.revealValue || 'back'}.svg`} />)\n            }\n            {gameState.phrase > 3 && <div className=\"text-success\" style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', fontWeight: 700, fontSize: '3rem', textShadow: '0 0 3px rgba(0,0,0,0.8)' }}>{handsValue[0]}</div>}\n          </div>\n        </div>\n        <div id=\"players-zone\" className=\"d-flex flex-grow-1\">\n          {Array.from({ length: 2 }).map((_, index) => index + 1).map(playerIndex => {\n            const playerHand = cardsInPlayerHand[playerIndex];\n            const playerId = game[`player_${playerIndex}`];\n            const playerName = game[`player_${playerIndex}_name`];\n            const playerBet = (playerBets.find(player => player.id === playerId) || {}).amount;\n            const playerMoney = (playerMonies.find(player => player.id === playerId) || {}).amount;\n            const isCurrentPlayer = playerId === currentUser.id;\n            const currentPlayerIsActivePlayer = playerIndex === gameState.phrase;\n            const playerHasUnknownCard = playerHand.some(card => card.revealValue === \"\")\n\n            return (\n              <div key={playerIndex} className=\"d-flex flex-column-reverse flex-grow-1 pb-5\">\n                <h4 className=\"text-center flex-0\">\n                  {`${playerName}${isCurrentPlayer ? ` (You)` : ''} - $${playerMoney}`}\n                </h4>\n                <div className=\"flex-0 d-flex justify-content-center align-items-center\" style={{ height: '3.5em' }}>\n                  {\n                    (gameState.phrase === 0 && isCurrentPlayer && !playerBet)\n                      ? this.renderBettingPanel(playerMoney, playerBet)\n                      : playerBet\n                        ? `Betting $${playerBet}`\n                        : ' '\n                  }\n                </div>\n                <div className=\"d-flex justify-content-center align-items-center\" style={{ height: '4.5em' }}>\n                  {\n                    isCurrentPlayer && currentPlayerIsActivePlayer && !playerHasUnknownCard && (\n                      <>\n                        <Button color=\"primary mx-1\" onClick={this.hit} disabled={sending}>Hit</Button>\n                        <Button color=\"primary mx-1\" onClick={this.stand} disabled={sending}>Stand</Button>\n                      </>\n                    )\n                  }\n                  {gameState.phrase > 3 && isCurrentPlayer && !isReadyForNextRound && (\n                    <Button className=\"mx-1\" color=\"primary\" onClick={this.readyForNextRound}>Next Round</Button>\n                  )}\n                </div>\n                <div className=\"d-flex justify-content-center align-items-end position-relative\">\n                  {\n                    playerHand.map((card, index) => <img key={card.card_index} className=\"game-card\" style={{ bottom: `${index * 30}px`, marginLeft: `${index === 0 ? 0 : -80}px` }} width=\"100\" alt={card.revealValue || 'back'} src={`/images/cards/${card.revealValue || 'back'}.svg`} />)\n                  }\n                  {gameState.phrase > 3 && <div className=\"text-success\" style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', fontWeight: 700, fontSize: '3rem', textShadow: '0 0 3px rgba(0,0,0,0.8)' }}>{handsValue[playerIndex]}</div>}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n\n  renderLoader = (phrase, player_1_name, player_2_name) => (\n    <div className=\"position-absolute d-flex flex-column justify-content-center align-items-center\" style={{ top: 0, left: 0, bottom: 0, right: 0 }} >\n      <div className=\"lds-ellipsis\">\n        <div />\n        <div />\n        <div />\n        <div />\n      </div>\n      <h4 className=\"px-5\">\n        {\n          phrase === -4 ? `${player_2_name} is shuffling the deck very carefully...`\n            : phrase === -3 ? `${player_1_name} is shuffling the deck very carefully...`\n              : phrase === -2 ? `Players are double-checking the deck...`\n                : `Game starting soon...`\n        }\n      </h4>\n    </div>\n  )\n\n  render() {\n    const { messages, fulfilledMessages, pendingMessages, game, gameState, resigning } = this.props;\n    const messagesToShow = [...messages, ...fulfilledMessages, ...pendingMessages];\n    const currentUser = auth.getCurrentUser();\n\n    return (\n      <Row>\n        <Col lg=\"9\" className=\"py-3 position-relative\" style={{ height: '100vh' }}>\n          {!isEmpty(game) && (\n            <>\n              {gameState.phrase < 0 && this.renderLoader(gameState.phrase, game.player_1_name, game.player_2_name)}\n              {gameState.phrase >= 0 && this.renderGameView(currentUser)}\n\n              {game.finished !== -1 && (\n                <div style={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, background: 'rgba(0,0,0,0.6)' }} className=\"d-flex justify-content-center align-items-center\">\n                  <div>Game has ended. Winner: {game.winner === 1 ? game.player_1_name : game.player_2_name}!</div>\n                </div>\n              )}\n\n              <div className=\"position-absolute\" style={{ right: 10, top: 10 }}>\n                {\n                  game.finished !== -1 || (game.player_1 !== currentUser.id && game.player_2 !== currentUser.id)\n                    ? (\n                      <Button color=\"outline-secondary\" onClick={this.leaveGame}>\n                        Leave Game\n                    </Button>\n                    ) : (\n                      <Button color=\"outline-secondary\" disabled={resigning} onClick={this.confirmResign}>\n                        Resign\n                    </Button>\n                    )\n                }\n              </div>\n            </>\n          )}\n        </Col>\n        <Col lg=\"3\" className=\"d-flex flex-column justify-content-end py-3 col-lg-3\" style={{ maxHeight: '100vh', background: 'rgba(0,0,0,0.2)' }}>\n          <div className=\"flex-grow-1 d-flex flex-column justify-content-end\" style={{ overflow: 'hidden' }}>\n            <div style={{ overflow: 'auto' }} ref=\"messages\">\n              {\n                messagesToShow.length > 0\n                  ? messagesToShow.map(message => (\n                    <p\n                      style={{\n                        wordBreak: 'break-word'\n                      }}\n                      key={message.timestamp}>\n                      <b className={message.author_name === currentUser.username ? 'text-primary' : 'text-secondary'}>[{moment(message.timestamp).fromNow()}] {message.author_name}</b>:<br />{message.message}\n                    </p>\n                  ))\n                  : <div className=\"text-muted\">Say something nice e.g. \"Good game, have fun!\"</div>\n              }\n            </div>\n          </div>\n          <Form className=\"flex-grow-0 mt-3\" onSubmit={this.postMessage}>\n            <Input type=\"text\" autoComplete=\"message\" placeholder=\"Chat...\" value={this.state.message} onChange={this.onMessageChanged} />\n          </Form>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  getGameStatus,\n  postMessage,\n  resign,\n  reset,\n  placeBet,\n  getCardFragments,\n  hit,\n  stand,\n  readyForNextRound\n};\nconst mapAppStateToProps = ({ game }) => {\n  const {\n    sending,\n    loadingGameStatus,\n    loadingCardFragments,\n    cardCodewords,\n    resigning,\n    messages,\n    pendingMessages,\n    fulfilledMessages,\n    game: gameInfo,\n    gameState,\n    pendingActions,\n    playerBets,\n    playerMonies,\n    cardsInPlayerHand,\n    handsValue,\n    isReadyForNextRound\n  } = game;\n  return {\n    sending,\n    resigning,\n    loadingGameStatus,\n    loadingCardFragments,\n    cardCodewords,\n    game: gameInfo,\n    gameState,\n    playerBets,\n    playerMonies,\n    messages,\n    fulfilledMessages,\n    pendingMessages,\n    pendingActions,\n    cardsInPlayerHand,\n    handsValue,\n    isReadyForNextRound\n  }\n}\n\nexport default withRouter(connect(mapAppStateToProps, mapDispatchToProps)(Game));","import Game from './Game';\n\nexport default Game;","export const ACTION_TYPES = {\n  SET_NODE_LOCATION: 'config/SET_NODE_LOCATION'\n}\n\nexport const setNodeLocation = uri => ({\n  type: ACTION_TYPES.SET_NODE_LOCATION,\n  payload: uri\n});\n\n\nconst reducer = (state = {}, { type, payload, ...others }) => {\n  switch (type) {\n    case ACTION_TYPES.SET_NODE_LOCATION:\n      window.localStorage.setItem('nodeLocation', payload);\n      return {\n        ...state,\n        nodeLocation: payload\n      }\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","import React from 'react';\nimport { Row, Col, Card, CardBody, Form, FormGroup, Label, Input, Button } from 'reactstrap';\n\nimport blockchain from '../../blockchain/blockchain';\nimport auth from '../../blockchain/auth';\nimport { setNodeLocation } from '../../Redux/config/config';\nimport { connect } from 'react-redux';\n\nclass NodeLocationPrompt extends React.Component {\n  state = {\n    location: '',\n    loading: false,\n    success: true,\n  }\n\n  componentDidMount() {\n    const cachedLocation = window.localStorage.getItem('nodeLocation', '');\n    if (cachedLocation) {\n      this.setState({ location: cachedLocation }, this.initializeNodeLocation);\n    }\n  }\n\n  async initializeNodeLocation() {\n    this.setState({ loading: true, success: true });\n    const result = await blockchain.init(this.state.location);\n    if (result === \"pong\") {\n      if (process.env.NODE_ENV === 'production') await auth.loginFromSession();\n      this.props.setNodeLocation(this.state.location);\n    }\n    else {\n      this.setState({ loading: false, success: false });\n    }\n  }\n\n  registerLocation = e => {\n    e.preventDefault();\n    if (!this.state.location) return;\n    this.initializeNodeLocation();\n  }\n\n  onFieldChanged = e => this.setState({ [e.target.name]: e.target.value });\n\n  render() {\n    const { location } = this.state;\n\n    return (\n      <Row className=\"justify-content-center align-items-center\" style={{ height: '100vh' }}>\n        <Col className=\"m-auto\" style={{ paddingBottom: '20vh' }} sm=\"10\" md=\"6\" lg=\"5\" xl=\"4\">\n          <Card>\n            <CardBody>\n              {\n                this.state.loading ? (\n                  <div>Testing connection, please wait...</div>\n                ) : (\n                    <Form onSubmit={this.registerLocation}>\n                      <FormGroup>\n                        {!this.state.success && <div className=\"color-danger\">Cannot connect to server!</div>}\n                        <Label>Please enter node location:</Label>\n                        <Input type=\"text\" name=\"location\" placeholder=\"https://try.chromia.dev/node/#####/\" value={location} onChange={this.onFieldChanged} />\n                      </FormGroup>\n                      <div className=\"d-flex justify-content-end\">\n                        <Button color=\"primary\" type=\"submit\">Connect</Button>\n                      </div>\n                    </Form>\n                  )\n              }\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  setNodeLocation\n}\n\nexport default connect(null, mapDispatchToProps)(NodeLocationPrompt);","import NodeLocationPrompt from './NodeLocationPromp';\n\nexport default NodeLocationPrompt;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport { connect } from 'react-redux';\n\nimport auth from '../blockchain/auth';\nimport Login from './Login';\nimport Lobby from './Lobby';\nimport Game from './Game';\nimport NodeLocationPrompt from './NodeLocationPrompt';\n\nexport const PrivateRoute = ({ component: Component, ...props }) => (\n  <Route {...props} render={() => (\n    auth.isLoggedIn() ? <Component {...props} /> : <Redirect to=\"/\" />\n  )} />\n)\n\nclass Routes extends React.Component {\n  render() {\n    return (\n      <Router basename={process.env.NODE_ENV === 'development' ? '' : `rell-game`}>\n        {\n          this.props.nodeLocation\n            ? (\n              <Switch>\n                <PrivateRoute path=\"/lobby\" component={Lobby} />\n                <PrivateRoute path=\"/game/:gameId\" component={Game} />\n                <Route path=\"/\">\n                  <Login />\n                </Route>\n              </Switch>\n            )\n            : <NodeLocationPrompt />\n        }\n\n      </Router>\n    );\n  }\n}\n\nconst mapAppStateToProps = ({ config }) => ({ nodeLocation: config.nodeLocation });\n\nexport default connect(mapAppStateToProps)(Routes);","import { combineReducers } from \"redux\";\nimport config from \"./config/config\";\nimport lobby from './lobby/lobby';\nimport game from './game/game';\n\nexport default combineReducers({\n  config,\n  lobby,\n  game\n});\n","import React from 'react';\nimport './App.scss';\nimport { Provider as ReduxProvider } from \"react-redux\";\n\nimport Routes from './Routes/';\nimport { createReduxStore } from './Redux/store';\n\nconst reduxStore = createReduxStore();\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <ReduxProvider store={reduxStore}>\n          <Routes />\n        </ReduxProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { composeWithDevTools as composeWithReduxDevTools } from \"redux-devtools-extension\";\nimport reduxThunk from \"redux-thunk\";\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { createStore, applyMiddleware } from \"redux\";\n\nimport reducers from \"./reducers\";\n\nexport const createReduxStore = () => {\n  return createStore(\n    reducers,\n    {},\n    composeWithReduxDevTools(\n      applyMiddleware(reduxThunk, promiseMiddleware)\n    )\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { knuthShuffle as shuffle } from 'knuth-shuffle';\nimport { isEmpty } from 'lodash';\nimport { createConfig, createPlayer, createDeck, encryptDeck, decryptDeck, decryptCard } from 'mental-poker';\n\nexport const cardNames = [\n  \"1D\", \"2D\", \"3D\", \"4D\", \"5D\", \"6D\", \"7D\", \"8D\", \"9D\", \"10D\", \"JD\", \"QD\", \"KD\",\n  \"1H\", \"2H\", \"3H\", \"4H\", \"5H\", \"6H\", \"7H\", \"8H\", \"9H\", \"10H\", \"JH\", \"QH\", \"KH\",\n  \"1S\", \"2S\", \"3S\", \"4S\", \"5S\", \"6S\", \"7S\", \"8S\", \"9S\", \"10S\", \"JS\", \"QS\", \"KS\",\n  \"1C\", \"2C\", \"3C\", \"4C\", \"5C\", \"6C\", \"7C\", \"8C\", \"9C\", \"10C\", \"JC\", \"QC\", \"KC\"\n];\n\nlet config;\nlet self;\nlet opponent;\nlet cardCodewords;\n\nexport const getSelf = () => self;\n\nexport const newGame = () => {\n  config = createConfig(cardNames.length);\n  const selfAsBuffer = createPlayer(config);\n  self = {\n    cardCodewordFragments: selfAsBuffer.cardCodewordFragments.map(buffer => buffer.toString('hex')),\n    keyPairs: selfAsBuffer.keyPairs.map(keyPair => ({\n      privateKey: keyPair.privateKey.toString('hex')\n    }))\n  }\n  opponent = null;\n  cardCodewords = [];\n\n  return {\n    config,\n    self\n  }\n}\n\nexport const loadGame = (cachedSelf, cachedConfig) => {\n  self = cachedSelf;\n  config = cachedConfig;\n  opponent = null;\n  cardCodewords = [];\n\n  return {\n    config,\n    self\n  }\n}\n\nexport const createCardCodeWords = opponentFragments => {\n  if (isEmpty(self)) return [];\n\n  opponent = {\n    cardCodewordFragments: opponentFragments,\n    keyPairs: Array.from({ length: 53 }).map(() => ({}))\n  };\n\n  cardCodewords = createDeck(\n    [self, opponent].map(player => player.cardCodewordFragments.map(fragment => Buffer.from(fragment, 'hex'))),\n  );\n\n  return cardCodewords;\n}\n\nexport const updateOpponentDecrypts = decrypts => {\n  if (!isEmpty(opponent)) opponent.keyPairs = decrypts.map(key => ({ privateKey: key.decrypt_key }));\n}\n\nexport const initialShuffle = () => shuffleDeck(cardCodewords.map(card => card.toString('hex')))\n\nexport const shuffleDeck = deck => {\n  return encryptDeck(\n    shuffle(deck.map(card => Buffer.from(card, 'hex'))),\n    Buffer.from(self.keyPairs[config.cardCount].privateKey, 'hex')\n  ).map(card => card.toString('hex'));\n}\n\nexport const encryptCards = deck => encryptDeck(\n  decryptDeck(deck.map(card => Buffer.from(card, 'hex')), Buffer.from(self.keyPairs[config.cardCount].privateKey, 'hex')),\n  self.keyPairs.map(keyPair => Buffer.from(keyPair.privateKey, 'hex')),\n).map(card => card.toString('hex'));\n\nexport const decryptCardToName = (deck, cardIndex) => {\n  const cardEncrypted = deck[cardIndex].encrypted;\n  const cardDecrypted = decryptCard(\n    Buffer.from(cardEncrypted, 'hex'),\n    [self, opponent].map(player => Buffer.from(player.keyPairs[cardIndex].privateKey, 'hex')),\n  );\n\n  return cardNames[cardCodewords.findIndex(cardCodeword => cardCodeword.equals(cardDecrypted))];\n}\n\nexport const valueFromCardName = cardName => {\n  if (isEmpty(cardName)) return 0;\n  if (cardName.length === 3) return 10;\n  for (let i = 0; i < 9; i++) {\n    let value = i + 1;\n    if (parseInt(cardName[0]) === value) return value;\n  }\n  return 10;\n}","import pcl from 'postchain-client';\nimport blockchain from './blockchain';\n\nconst auth = (function () {\n  let currentUser = {};\n\n  const register = async username => {\n    try {\n      const user = pcl.util.makeKeyPair();\n      const { pubKey, privKey } = user;\n      const rq = blockchain.getGtx().newTransaction([pubKey]);\n      rq.addOperation('register', pubKey, username);\n      rq.sign(privKey, pubKey);\n\n      await rq.postAndWaitConfirmation();\n\n      return await login(privKey.toString('hex'));\n    } catch (e) {\n      console.error(e);\n      return {};\n    }\n  }\n\n  const loginFromSession = async () => {\n    const session = sessionStorage.getItem('userLogin');\n    if (session) await auth.login(session);\n  }\n\n  const login = async privKeyAsText => {\n    try {\n      const privKey = Buffer.from(privKeyAsText, 'hex');\n      const pubKey = pcl.util.createPublicKey(privKey);\n      const pubKeyAsText = pubKey.toString('hex');\n      const { id, username } = await blockchain.getGtx().query(\"get_user\", {\n        user_pubkey: pubKeyAsText\n      });\n\n      currentUser = {\n        id,\n        username,\n        pubKey,\n        privKey\n      };\n\n      sessionStorage.setItem('userLogin', privKeyAsText);\n\n      return {\n        username,\n        pubKey: pubKeyAsText,\n        privKey: privKeyAsText\n      };\n    } catch (e) {\n      console.error(e);\n      return {};\n    }\n  }\n\n  const logout = () => {\n    currentUser = {};\n    sessionStorage.removeItem('userLogin');\n  }\n\n  const isLoggedIn = () => !!currentUser.privKey;\n\n  const getCurrentUser = () => ({ ...currentUser });\n\n  return {\n    register,\n    login,\n    loginFromSession,\n    logout,\n    isLoggedIn,\n    getCurrentUser\n  }\n})();\n\nexport default auth;\n\n// eab361efa1b15ec1ba5961e50dca5e30b1be47a0f4489b6bb22b6131811a9572\n// 8458c8986de343b967928631ec00b8bd7b4bff4c32ee10d8a085975ee922abc0\n\n// 99554f606d45ee3dba7695ecf592ac2210f7ba7718dbc5a781925c0aae3764a1"],"sourceRoot":""}