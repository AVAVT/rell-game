{"version":3,"sources":["blockchain/blockchain.js","blockchain/game-logic.js","Routes/Login/Login.js","Routes/Login/index.js","blockchain/api.js","Redux/helpers.js","Redux/lobby/lobby.js","Routes/Lobby/Lobby.js","Routes/Lobby/index.js","Redux/game/game.js","Routes/Game/Components/BetSlider.js","Routes/Game/Components/RuleModal.js","Routes/Game/Components/GameCard.js","Routes/Game/Game.js","Routes/Game/index.js","Redux/config/config.js","Routes/NodeLocationPrompt/NodeLocationPromp.js","Routes/NodeLocationPrompt/index.js","Routes/index.js","Redux/reducers.js","App.js","Redux/store.js","serviceWorker.js","index.js","blockchain/auth.js"],"names":["blockchain","gtx","init","nodeUri","a","console","log","rest","pcl","restClient","createRestClient","gtxClient","createClient","Buffer","from","query","result","error","getGtx","config","self","opponent","cardCodewords","cardNames","getSelf","newGame","createConfig","length","selfAsBuffer","createPlayer","cardCodewordFragments","map","buffer","toString","keyPairs","keyPair","privateKey","loadGame","cachedSelf","cachedConfig","createCardCodeWords","opponentFragments","isEmpty","Array","createDeck","player","fragment","updateOpponentDecrypts","decrypts","key","decrypt_key","initialShuffle","shuffleDeck","card","deck","encryptDeck","shuffle","cardCount","encryptCards","decryptDeck","decryptCardToName","cardIndex","cardEncrypted","encrypted","cardDecrypted","decryptCard","findIndex","cardCodeword","equals","Login","state","username","privKey","loginPrivKey","updating","register","e","preventDefault","setState","auth","user","alert","login","props","history","push","onFieldChanged","target","name","value","isLoggedIn","this","Row","className","style","height","Col","paddingBottom","sm","md","lg","xl","Card","CardBody","FormGroup","Label","Input","type","readOnly","placeholder","row","Button","color","tag","Link","to","Form","onSubmit","InputGroup","required","onChange","InputGroupAddon","addonType","minWidth","disabled","React","Component","withRouter","lookForGame","getCurrentUser","id","pubKey","rq","newTransaction","addOperation","crypto","randomBytes","sign","postAndWaitConfirmation","stopLookingForGame","joinGame","userId","postMessage","gameId","message","resign","getGameStatus","game","passShuffledDeck","placeBet","round","amount","hit","stand","getCardFragments","postCardFragments","fragments","postCardSecret","decrypt","postCardReveal","cardReveal","readyForNextRound","PENDING","action","REJECTED","FULFILLED","ACTION_TYPES","initialState","loading","waitList","gameList","sending","isLookingForGame","reducer","payload","wait_list","game_list","some","Lobby","initialized","logout","composeRedirectToGameHandler","findGame","quitFindGame","composeJoinHandler","reset","getLobbyStatus","debounce","prevProps","prevState","currentUser","find","player_1","player_2","onClick","Table","responsive","borderless","striped","hover","waiter","moment","timestamp","fromNow","valign","player_1_name","player_2_name","size","offset","Progress","animated","mapDispatchToProps","api","connect","lobby","isWaitingForGameStart","PENDING_TYPES","PASS_SHUFFLED_DECK","PLACE_BET","isPlayer1","gameInfo","isPlayer2","performAutomatedResponse","dispatch","appGameState","gameState","pendingActions","performAutomatedShufflingPhrase","cards_in_player_hand","playerHand","cardInHand","is_open","card_index","reveal_value","card_decrypts","myPlayerIndex","revealValue","phrase","game_state","receivedDeck","shuffleAndPassDeck","encryptAndPassDeck","isNew","Promise","resolve","reject","loadingGameStatus","loadingCardFragments","messages","cardsInPlayerHand","handsValue","playerBets","playerMonies","pendingMessages","fulfilledMessages","resigning","isReadyForNextRound","meta","player_monies","player_bets","hands_value","msg","filter","bet","index","expectedHandSize","top_card_index","expectedPhrase","BetSlider","Math","min","maxValue","axis","x","xmax","xmin","styles","active","backgroundColor","PureComponent","RuleModal","Modal","isOpen","toggle","onClose","ModalHeader","ModalBody","GameCard","top","orinTop","left","orinLeft","setTimeout","cardName","width","transform","alt","src","process","Game","showingRules","preloadImages","forEach","picture","Image","toggleRules","onMessageChanged","Number","match","params","leaveGame","confirmResign","window","confirm","renderBettingPanel","playerMoney","playerBet","buttonDisabled","renderGameView","marginRight","position","fontWeight","fontSize","textShadow","_","playerIndex","playerId","playerName","isCurrentPlayer","currentPlayerIsActivePlayer","playerHasUnknownCard","innerHeight","marginLeft","renderLoader","bottom","right","refs","scrollTop","scrollHeight","messagesToShow","finished","background","winner","maxHeight","overflow","ref","wordBreak","author_name","autoComplete","getState","newGameState","Date","getTime","data","cachedData","JSON","parse","localStorage","getItem","dataCached","setItem","stringify","nodeLocation","NodeLocationPrompt","location","success","registerLocation","initializeNodeLocation","cachedLocation","loginFromSession","setNodeLocation","uri","PrivateRoute","component","render","Routes","basename","path","combineReducers","reduxStore","createStore","reducers","composeWithReduxDevTools","applyMiddleware","reduxThunk","promiseMiddleware","App","store","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","util","makeKeyPair","session","sessionStorage","privKeyAsText","createPublicKey","pubKeyAsText","user_pubkey","removeItem"],"mappings":"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","file":"static/js/main.d4881096.chunk.js","sourcesContent":["import pcl from 'postchain-client';\n\nconst blockchain = (function () {\n  let gtx;\n\n  const init = async nodeUri => {\n    try {\n      console.log(nodeUri);\n      const rest = pcl.restClient.createRestClient(nodeUri, '78967baa4768cbcef11c508326ffb13a956689fcb6dc3ba17f4b895cbb1577a3', 5)\n\n      gtx = pcl.gtxClient.createClient(\n        rest,\n        Buffer.from(\n          '78967baa4768cbcef11c508326ffb13a956689fcb6dc3ba17f4b895cbb1577a3',\n          'hex'\n        ),\n        []\n      );\n      const result = await gtx.query('ping', {});\n      console.log('Postchain client initialized.');\n      return result;\n\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  const getGtx = () => gtx;\n\n  return {\n    init,\n    getGtx\n  }\n})();\n\nexport default blockchain;","import { knuthShuffle as shuffle } from 'knuth-shuffle';\nimport { isEmpty } from 'lodash';\nimport { createConfig, createPlayer, createDeck, encryptDeck, decryptDeck, decryptCard } from 'mental-poker';\n\nexport const cardNames = [\n  \"1D\", \"2D\", \"3D\", \"4D\", \"5D\", \"6D\", \"7D\", \"8D\", \"9D\", \"10D\", \"JD\", \"QD\", \"KD\",\n  \"1H\", \"2H\", \"3H\", \"4H\", \"5H\", \"6H\", \"7H\", \"8H\", \"9H\", \"10H\", \"JH\", \"QH\", \"KH\",\n  \"1S\", \"2S\", \"3S\", \"4S\", \"5S\", \"6S\", \"7S\", \"8S\", \"9S\", \"10S\", \"JS\", \"QS\", \"KS\",\n  \"1C\", \"2C\", \"3C\", \"4C\", \"5C\", \"6C\", \"7C\", \"8C\", \"9C\", \"10C\", \"JC\", \"QC\", \"KC\"\n];\n\nlet config;\nlet self;\nlet opponent;\nlet cardCodewords;\n\nexport const getSelf = () => self;\n\nexport const newGame = () => {\n  config = createConfig(cardNames.length);\n  const selfAsBuffer = createPlayer(config);\n  self = {\n    cardCodewordFragments: selfAsBuffer.cardCodewordFragments.map(buffer => buffer.toString('hex')),\n    keyPairs: selfAsBuffer.keyPairs.map(keyPair => ({\n      privateKey: keyPair.privateKey.toString('hex')\n    }))\n  }\n  opponent = null;\n  cardCodewords = [];\n\n  return {\n    config,\n    self\n  }\n}\n\nexport const loadGame = (cachedSelf, cachedConfig) => {\n  self = cachedSelf;\n  config = cachedConfig;\n  opponent = null;\n  cardCodewords = [];\n\n  return {\n    config,\n    self\n  }\n}\n\nexport const createCardCodeWords = opponentFragments => {\n  if (isEmpty(self)) return [];\n\n  opponent = {\n    cardCodewordFragments: opponentFragments,\n    keyPairs: Array.from({ length: 53 }).map(() => ({}))\n  };\n\n  cardCodewords = createDeck(\n    [self, opponent].map(player => player.cardCodewordFragments.map(fragment => Buffer.from(fragment, 'hex'))),\n  );\n\n  return cardCodewords;\n}\n\nexport const updateOpponentDecrypts = decrypts => {\n  if (!isEmpty(opponent)) opponent.keyPairs = decrypts.map(key => ({ privateKey: key.decrypt_key }));\n}\n\nexport const initialShuffle = () => shuffleDeck(cardCodewords.map(card => card.toString('hex')))\n\nexport const shuffleDeck = deck => {\n  return encryptDeck(\n    shuffle(deck.map(card => Buffer.from(card, 'hex'))),\n    Buffer.from(self.keyPairs[config.cardCount].privateKey, 'hex')\n  ).map(card => card.toString('hex'));\n}\n\nexport const encryptCards = deck => encryptDeck(\n  decryptDeck(deck.map(card => Buffer.from(card, 'hex')), Buffer.from(self.keyPairs[config.cardCount].privateKey, 'hex')),\n  self.keyPairs.map(keyPair => Buffer.from(keyPair.privateKey, 'hex')),\n).map(card => card.toString('hex'));\n\nexport const decryptCardToName = (deck, cardIndex) => {\n  const cardEncrypted = deck[cardIndex].encrypted;\n  const cardDecrypted = decryptCard(\n    Buffer.from(cardEncrypted, 'hex'),\n    [self, opponent].map(player => Buffer.from(player.keyPairs[cardIndex].privateKey, 'hex')),\n  );\n\n  return cardNames[cardCodewords.findIndex(cardCodeword => cardCodeword.equals(cardDecrypted))];\n}\n\nexport const valueFromCardName = cardName => {\n  if (isEmpty(cardName)) return 0;\n  if (cardName.length === 3) return 10;\n  for (let i = 0; i < 9; i++) {\n    let value = i + 1;\n    if (parseInt(cardName[0]) === value) return value;\n  }\n  return 10;\n}","import React from 'react';\nimport {\n  Row, Col, Card, CardBody, FormGroup, Form, Button, Input, Label, InputGroup, InputGroupAddon\n} from 'reactstrap';\nimport { Link, withRouter } from 'react-router-dom';\nimport { isEmpty } from 'lodash';\n\nimport auth from '../../blockchain/auth';\n\nclass Login extends React.Component {\n  state = {\n    username: '',\n    privKey: '',\n    loginPrivKey: '',\n    updating: false\n  }\n\n  componentDidMount() {\n    if (auth.isLoggedIn()) this.props.history.push('/lobby');\n  }\n\n  register = async e => {\n    e.preventDefault();\n    if (!this.state.username) return;\n    this.setState({ updating: true });\n    const user = await auth.register(this.state.username);\n\n    if (isEmpty(user)) alert(\"Operation failed! Please try again.\");\n\n    this.setState({\n      privKey: user.privKey,\n      updating: false\n    });\n  }\n\n  login = async e => {\n    e.preventDefault();\n    if (!this.state.loginPrivKey) return;\n    this.setState({ updating: true });\n    const user = await auth.login(this.state.loginPrivKey);\n\n    if (isEmpty(user)) {\n      alert(\"Unable to login! Invalid privKey or user does not exist.\");\n      this.setState({ updating: false });\n    }\n    else {\n      this.props.history.push('/lobby');\n    }\n  }\n\n  onFieldChanged = e => this.setState({ [e.target.name]: e.target.value });\n\n  render() {\n    const { privKey, username, updating, loginPrivKey } = this.state;\n\n    return (\n      <Row className=\"justify-content-center align-items-center\" style={{ height: '100vh' }}>\n        <Col className=\"m-auto\" style={{ paddingBottom: '20vh' }} sm=\"10\" md=\"6\" lg=\"5\" xl=\"4\">\n          {\n            !privKey ? (\n              <>\n                <h1 className=\"mb-3\">Welcome!</h1>\n                <Form onSubmit={this.login} className=\"row\">\n                  <FormGroup className=\"col mb-0 flex-grow-1\">\n                    <InputGroup>\n                      <Input type=\"password\" name=\"loginPrivKey\" required placeholder=\"Private Key...\" value={loginPrivKey} onChange={this.onFieldChanged} />\n                      <InputGroupAddon addonType=\"append\">\n                        <Button style={{ minWidth: '7em' }} className=\"btn-block\" color=\"primary\" type=\"submit\" disabled={updating}>Login</Button>\n                      </InputGroupAddon>\n                    </InputGroup>\n                  </FormGroup>\n                </Form>\n                <div className=\"text-center my-3\">-- or --</div>\n                <Form onSubmit={this.register} className=\"row\">\n                  <FormGroup className=\"col mb-0 flex-grow-1\">\n                    <InputGroup>\n                      <Input type=\"text\" readOnly={privKey} required name=\"username\" placeholder=\"Username...\" value={username} onChange={this.onFieldChanged} />\n                      <InputGroupAddon addonType=\"append\">\n                        <Button style={{ minWidth: '7em' }} className=\"btn-block\" color=\"primary\" type=\"submit\" disabled={updating}>Register</Button>\n                      </InputGroupAddon>\n                    </InputGroup>\n                  </FormGroup>\n                </Form>\n              </>)\n              : (\n                <>\n                  <Card>\n                    <CardBody>\n                      <FormGroup>\n                        <Label>Username:</Label>\n                        <Input type=\"text\" readOnly name=\"username\" placeholder=\"Username...\" value={username} />\n                      </FormGroup>\n                      {\n                        privKey && (<>\n                          <FormGroup>\n                            <Label>Private Key (Save this to login):</Label>\n                            <Input type=\"textarea\" name=\"privKey\" row=\"3\" value={privKey} readOnly />\n                          </FormGroup>\n                        </>)\n                      }\n                    </CardBody>\n                  </Card>\n                  <div className=\"d-flex justify-content-center mt-3\">\n                    <Button color=\"primary\" tag={Link} to=\"/lobby\">Let's Play!</Button>\n                  </div>\n                </>\n              )\n          }\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default withRouter(Login);","import Login from './Login';\n\nexport default Login;","import blockchain from './blockchain';\nimport crypto from 'crypto';\nimport auth from './auth';\n\nexport const lookForGame = () => {\n  if (!auth.isLoggedIn()) return false;\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"look_for_game\", id, crypto.randomBytes(32));\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const stopLookingForGame = () => {\n  if (!auth.isLoggedIn()) return false;\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"stop_looking_for_game\", id, crypto.randomBytes(32));\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const joinGame = (userId) => {\n  if (!auth.isLoggedIn()) return false;\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"join_game\", id, userId, crypto.randomBytes(32));\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const postMessage = (gameId, message) => {\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"post_message\", gameId, id, message, crypto.randomBytes(32));\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const resign = (gameId) => {\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"resign\", gameId, id, crypto.randomBytes(32));\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const getLobbyStatus = () => blockchain.getGtx().query(\"get_lobby_status\", {});\n\nexport const getGameStatus = (gameId) => {\n  return blockchain.getGtx().query(\"get_game_status\", { game: gameId });\n}\n\nexport const passShuffledDeck = (gameId, deck) => {\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"pass_shuffled_deck\", gameId, id, deck);\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const placeBet = (gameId, round, amount) => {\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"place_bet\", gameId, id, round, amount);\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const hit = (gameId) => {\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"player_hit\", gameId, id, crypto.randomBytes(32));\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const stand = (gameId) => {\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"player_stand\", gameId, id, crypto.randomBytes(32));\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const getCardFragments = (gameId) => {\n  return blockchain.getGtx().query(\"get_card_fragments\", { game: gameId });\n}\n\nexport const postCardFragments = (gameId, fragments) => {\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"post_card_fragments\", gameId, id, fragments);\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const postCardSecret = (gameId, cardIndex, decrypt) => {\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"post_card_secret\", gameId, id, cardIndex, decrypt);\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const postCardReveal = (gameId, cardIndex, cardReveal) => {\n  console.log(`Posting cardReveal: ${cardReveal}`)\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"post_card_reveal\", gameId, id, cardIndex, cardReveal);\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}\n\nexport const readyForNextRound = (gameId) => {\n  const { id, privKey, pubKey } = auth.getCurrentUser();\n  const rq = blockchain.getGtx().newTransaction([pubKey]);\n  rq.addOperation(\"ready_for_next_round\", gameId, id, crypto.randomBytes(32));\n  rq.sign(privKey, pubKey);\n  return rq.postAndWaitConfirmation();\n}","export const PENDING = action => `${action}_PENDING`;\nexport const REJECTED = action => `${action}_REJECTED`;\nexport const FULFILLED = action => `${action}_FULFILLED`;","import * as api from '../../blockchain/api';\nimport auth from '../../blockchain/auth';\nimport {\n  PENDING,\n  REJECTED,\n  FULFILLED\n} from '../helpers';\n\nexport const ACTION_TYPES = {\n  RESET: 'lobby/RESET',\n  FETCH_STATUS: 'lobby/FETCH_STATUS',\n  LOOK_FOR_GAME: 'lobby/LOOK_FOR_GAME',\n  STOP_LOOKING_FOR_GAME: 'lobby/STOP_LOOKING_FOR_GAME',\n  JOIN_GAME: 'lobby/JOIN_GAME',\n}\n\nexport const lookForGame = () => ({\n  type: ACTION_TYPES.LOOK_FOR_GAME,\n  payload: api.lookForGame()\n})\n\nexport const stopLookingForGame = () => ({\n  type: ACTION_TYPES.STOP_LOOKING_FOR_GAME,\n  payload: api.stopLookingForGame()\n})\n\nexport const joinGame = (userId) => ({\n  type: ACTION_TYPES.JOIN_GAME,\n  payload: api.joinGame(userId)\n})\n\nexport const getLobbyStatus = () => ({\n  type: ACTION_TYPES.FETCH_STATUS,\n  payload: api.getLobbyStatus()\n})\n\nexport const reset = () => ({\n  type: ACTION_TYPES.RESET\n})\n\nconst initialState = {\n  loading: false,\n  waitList: [],\n  gameList: [],\n  sending: false,\n  isLookingForGame: false,\n  error: null\n}\n\n\nconst reducer = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case PENDING(ACTION_TYPES.FETCH_STATUS):\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case FULFILLED(ACTION_TYPES.FETCH_STATUS):\n      const waitList = payload.wait_list;\n      const gameList = payload.game_list;\n      return {\n        ...state,\n        loading: false,\n        waitList,\n        gameList,\n        isLookingForGame: state.sending ? state.isLookingForGame : waitList.some(user => user.id === auth.getCurrentUser().id)\n      };\n    case REJECTED(ACTION_TYPES.FETCH_STATUS):\n      return {\n        ...state,\n        loading: false,\n        error: payload\n      }\n    case PENDING(ACTION_TYPES.LOOK_FOR_GAME):\n      return {\n        ...state,\n        sending: true,\n        isLookingForGame: true,\n        error: null\n      };\n    case PENDING(ACTION_TYPES.STOP_LOOKING_FOR_GAME):\n      return {\n        ...state,\n        sending: true,\n        isLookingForGame: false,\n        error: null\n      };\n    case FULFILLED(ACTION_TYPES.LOOK_FOR_GAME):\n    case FULFILLED(ACTION_TYPES.STOP_LOOKING_FOR_GAME):\n      return {\n        ...state,\n        sending: false\n      };\n    case REJECTED(ACTION_TYPES.LOOK_FOR_GAME):\n    case REJECTED(ACTION_TYPES.STOP_LOOKING_FOR_GAME):\n      return {\n        ...state,\n        sending: false,\n        isLookingForGame: state.waitList.some(user => user.id === auth.getCurrentUser().id),\n        error: payload\n      }\n    case PENDING(ACTION_TYPES.JOIN_GAME):\n      return {\n        ...state,\n        sending: true,\n        error: null\n      };\n    case REJECTED(ACTION_TYPES.JOIN_GAME):\n      return {\n        ...state,\n        sending: false,\n        error: payload\n      };\n    case ACTION_TYPES.RESET:\n      return initialState;\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Button, Table, Row, Col, Card, CardBody, Progress } from 'reactstrap';\n\nimport { getLobbyStatus, lookForGame, stopLookingForGame, joinGame, reset } from '../../Redux/lobby/lobby';\nimport auth from '../../blockchain/auth';\nimport moment from 'moment';\nimport debounce from 'debounce';\n\nclass Lobby extends React.Component {\n  state = {\n    initialized: false\n  }\n\n  componentDidMount() {\n    this.props.reset();\n    this.getLobbyStatus = debounce(this.props.getLobbyStatus, 1000);\n    this.getLobbyStatus();\n  }\n\n  componentWillUnmount() {\n    if (this.props.isLookingForGame) this.props.stopLookingForGame();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.loading && !this.props.loading) {\n      if (!this.state.initialized) this.setState({ initialized: true });\n      this.getLobbyStatus();\n    }\n\n    const { currentUser, gameList } = this.props;\n    if (prevProps.gameList !== gameList) {\n      const newGame = gameList.find(game => game.player_1 === currentUser.id || game.player_2 === currentUser.id);\n      if (newGame) this.props.history.push(`/game/${newGame.id}`);\n    }\n  }\n\n  logout = () => {\n    auth.logout();\n    this.props.history.push('/');\n  }\n\n  composeRedirectToGameHandler = gameId => () => this.props.history.push(`/game/${gameId}`);\n\n  findGame = () => this.props.lookForGame();\n  quitFindGame = () => this.props.stopLookingForGame();\n  composeJoinHandler = userId => () => this.props.joinGame(userId);\n\n  render() {\n    const { waitList, gameList, currentUser, isLookingForGame, sending } = this.props;\n    return (\n      <>\n        <div className=\"d-flex justify-content-end align-items-end py-4\">\n          <div className=\"d-flex align-items-baseline\">\n            <div>Welcome, {currentUser.username}!</div>\n            <Button\n              color=\"outline-danger\"\n              className=\"ml-3\"\n              onClick={this.logout}>\n              Logout\n            </Button>\n          </div>\n        </div>\n        <Row>\n          {\n            !this.state.initialized\n              ? <Col md={{ size: 4, offset: 4 }} className=\"pt-5\"><Progress animated value={100} /></Col>\n              : (\n                <>\n                  <Col lg=\"6\" className=\"mb-3 mb-lg-0\">\n                    <Card style={{ height: '100%' }}>\n                      <CardBody>\n                        <div className=\"d-flex justify-content-between align-items-baseline\">\n                          <h4>Wait List</h4>\n                          {\n                            this.state.initialized && (\n                              isLookingForGame ? (\n                                <Button\n                                  color=\"outline-danger\"\n                                  onClick={this.quitFindGame}\n                                  disabled={sending}>\n                                  Stop Finding\n                      </Button>\n                              ) : (\n                                  <Button\n                                    color=\"primary\"\n                                    onClick={this.findGame}\n                                    disabled={sending}>\n                                    Find Game\n                          </Button>\n                                )\n                            )\n                          }\n                        </div>\n\n                        <hr />\n                        <Table responsive borderless striped hover>\n                          <tbody>\n                            {waitList.map(waiter => <tr key={waiter.id}>\n                              <td>{moment(waiter.timestamp).fromNow()}</td>\n                              <td valign=\"middle\">{waiter.username}</td>\n                              <td className=\"text-right\">{waiter.id !== currentUser.id && <Button color=\"outline-primary\" onClick={this.composeJoinHandler(waiter.id)}>Join</Button>} </td>\n                            </tr>)}\n                          </tbody>\n                        </Table>\n                      </CardBody>\n                    </Card>\n                  </Col>\n                  <Col lg=\"6\">\n                    <Card style={{ height: '100%' }}>\n                      <CardBody>\n                        <h4>Active Games</h4>\n                        <hr />\n                        <Table responsive borderless striped hover>\n                          <tbody>\n                            {gameList.map(game => <tr key={game.id}>\n                              <td>{moment(game.timestamp).fromNow()}</td>\n                              <td>{game.player_1_name}</td>\n                              <td valign=\"middle\">{game.player_2_name}</td>\n                              <td className=\"text-right\">\n                                {\n                                  game.player_1 !== currentUser.id && game.player_2 !== currentUser.id\n                                    ? <Button color=\"outline-primary\" onClick={this.composeRedirectToGameHandler(game.id)}>Spectate</Button>\n                                    : <Button color=\"primary\" onClick={this.composeRedirectToGameHandler(game.id)}>Play</Button>\n                                } </td>\n                            </tr>)}\n                          </tbody>\n                        </Table>\n                      </CardBody>\n                    </Card>\n                  </Col>\n                </>\n              )\n          }\n        </Row>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  reset,\n  getLobbyStatus,\n  lookForGame,\n  stopLookingForGame,\n  joinGame\n}\nconst mapAppStateToProps = ({ lobby }) => {\n  const { loading, waitList, gameList, sending, isLookingForGame, isWaitingForGameStart, error } = lobby;\n  return {\n    loading,\n    sending,\n    waitList,\n    gameList,\n    isWaitingForGameStart,\n    isLookingForGame,\n    error,\n    currentUser: auth.getCurrentUser()\n  }\n}\n\nexport default withRouter(connect(mapAppStateToProps, mapDispatchToProps)(Lobby));","import Lobby from './Lobby';\n\nexport default Lobby;","import { isEmpty } from 'lodash';\n\nimport * as api from '../../blockchain/api';\nimport auth from '../../blockchain/auth';\nimport {\n  PENDING,\n  REJECTED,\n  FULFILLED\n} from '../helpers';\n\nimport {\n  newGame,\n  loadGame,\n  createCardCodeWords,\n  initialShuffle,\n  shuffleDeck,\n  encryptCards,\n  getSelf,\n  updateOpponentDecrypts,\n  decryptCardToName\n} from '../../blockchain/game-logic';\n\nexport const ACTION_TYPES = {\n  RESET: 'game/RESET',\n  FETCH_STATUS: 'game/FETCH_STATUS',\n  FETCH_FRAGMENTS: 'game/FETCH_FRAGMENTS',\n  POST_MESSAGE: 'game/POST_MESSAGE',\n  PASS_SHUFFLED_DECK: 'game/PASS_SHUFFLED_DECK',\n  PLACE_BET: 'game/PLACE_BET',\n  READY_FOR_NEXT_ROUND: 'game/READY_FOR_NEXT_ROUND',\n  HIT: 'game/HIT',\n  STAND: 'game/STAND',\n  RESIGN: 'game/RESIGN'\n}\n\nexport const PENDING_TYPES = {\n  PASS_SHUFFLED_DECK: 'game/PASS_SHUFFLED_DECK',\n  PLACE_BET: 'game/PLACE_BET'\n}\n\nexport const getGameStatus = gameId => async (dispatch, getState) => {\n  const result = await dispatch({\n    type: ACTION_TYPES.FETCH_STATUS,\n    payload: api.getGameStatus(gameId)\n  });\n\n  const newGameState = result.value;\n  if (isPlayer1(newGameState.game) || isPlayer2(newGameState.game)) {\n    const state = getState().game;\n    performAutomatedResponse(dispatch, state, gameId, result.value);\n  }\n\n  return result;\n}\n\nexport const getCardFragments = gameId => async (dispatch, getState) => {\n  const result = await dispatch({\n    type: ACTION_TYPES.FETCH_FRAGMENTS,\n    payload: api.getCardFragments(gameId)\n  });\n\n  const data = result.value;\n  const state = getState().game;\n\n  const currentUser = auth.getCurrentUser();\n  var self = getSelf();\n  if (isEmpty(self)) {\n    const cachedData = JSON.parse(localStorage.getItem(`gameSecrets_${currentUser.id}`) || '{}');\n    const dataCached = !isEmpty(cachedData) && cachedData.gameId === state.game.id;\n    const data = dataCached\n      ? loadGame(cachedData.self, cachedData.config)\n      : newGame();\n    self = data.self;\n\n    if (!dataCached) {\n      localStorage.setItem(`gameSecrets_${currentUser.id}`, JSON.stringify({ self: data.self, config: data.config, gameId: state.game.id }));\n    }\n  }\n\n  if (isEmpty(data[state.myPlayerIndex])) {\n    // Our card fragments is not on the server\n    try {\n      api.postCardFragments(state.game.id, self.cardCodewordFragments);\n    }\n    catch (e) {\n      console.error(e);\n      alert('An error occured, please refresh the page to try again.');\n    }\n  }\n\n  return result;\n}\n\nexport const postMessage = (gameId, message) => ({\n  type: ACTION_TYPES.POST_MESSAGE,\n  payload: api.postMessage(gameId, message),\n  meta: {\n    msg: {\n      author_name: auth.getCurrentUser().username,\n      message,\n      timestamp: new Date().getTime()\n    }\n  }\n})\n\nexport const resign = (gameId) => ({\n  type: ACTION_TYPES.RESIGN,\n  payload: api.resign(gameId)\n})\n\nexport const placeBet = (gameId, round, amount) => ({\n  type: ACTION_TYPES.PLACE_BET,\n  payload: api.placeBet(gameId, round, amount),\n  meta: {\n    player: auth.getCurrentUser().id,\n    amount\n  }\n});\n\nexport const hit = gameId => (dispatch, getState) => {\n  const state = getState().game;\n  const expectedHandSize = state.cardsInPlayerHand[state.myPlayerIndex + 1].length + 1;\n  return dispatch({\n    type: ACTION_TYPES.HIT,\n    payload: api.hit(gameId),\n    meta: {\n      expectedHandSize\n    }\n  });\n}\n\nexport const stand = gameId => (dispatch, getState) => {\n  return dispatch({\n    type: ACTION_TYPES.STAND,\n    payload: api.stand(gameId),\n    meta: {\n      expectedPhrase: getState().game.phrase + 1\n    }\n  });\n}\n\n\nexport const readyForNextRound = gameId => ({\n  type: ACTION_TYPES.READY_FOR_NEXT_ROUND,\n  payload: api.readyForNextRound(gameId)\n})\n\nexport const reset = () => ({\n  type: ACTION_TYPES.RESET\n});\n\nexport const isPlayer1 = gameInfo => auth.getCurrentUser().id === gameInfo.player_1;\nexport const isPlayer2 = gameInfo => auth.getCurrentUser().id === gameInfo.player_2;\n\nconst performAutomatedResponse = (dispatch, appGameState, gameId, gameState) => {\n  if (\n    !appGameState.pendingActions[PENDING_TYPES.PASS_SHUFFLED_DECK]\n    && !isEmpty(appGameState.cardCodewords)) {\n    performAutomatedShufflingPhrase(dispatch, gameId, gameState);\n  }\n\n  var self = getSelf();\n  if (!isEmpty(self)) {\n    for (const playerHand of gameState.cards_in_player_hand) {\n      for (const cardInHand of playerHand) {\n        if (cardInHand.is_open && !gameState.deck[cardInHand.card_index].reveal_value) {\n          api.postCardSecret(gameId, cardInHand.card_index, self.keyPairs[cardInHand.card_index].privateKey);\n          if (!isEmpty(gameState.card_decrypts[1 - appGameState.myPlayerIndex][cardInHand.card_index].decrypt_key)) {\n            updateOpponentDecrypts(gameState.card_decrypts[1 - appGameState.myPlayerIndex]);\n            try {\n              const revealValue = decryptCardToName(gameState.deck, cardInHand.card_index);\n              api.postCardReveal(gameId, cardInHand.card_index, revealValue);\n            } catch (e) {\n              console.error(e);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nconst performAutomatedShufflingPhrase = async (dispatch, gameId, gameState) => {\n  const phrase = gameState.game_state.phrase;\n  const receivedDeck = gameState.deck;\n  if ((phrase === -4 && isPlayer2(gameState.game))\n    || (phrase === -3 && isPlayer1(gameState.game))) {\n    try {\n      await shuffleAndPassDeck(dispatch, gameId, receivedDeck, phrase === -4);\n    } catch (e) {\n      console.error(e);\n      alert('An error occured, please refresh the page to try again.')\n    }\n  }\n\n  if ((phrase === -2 && isPlayer2(gameState.game))\n    || (phrase === -1 && isPlayer1(gameState.game))) {\n    try {\n      await encryptAndPassDeck(dispatch, gameId, gameState.deck);\n    } catch (e) {\n      console.error(e);\n      alert('An error occured, please refresh the page to try again.')\n    }\n  }\n}\n\nconst shuffleAndPassDeck = async (dispatch, gameId, deck, isNew) => new Promise(async (resolve, reject) => {\n  try {\n    await dispatch({\n      type: ACTION_TYPES.PASS_SHUFFLED_DECK,\n      payload: api.passShuffledDeck(gameId, isNew ? initialShuffle() : shuffleDeck(deck.map(card => card.encrypted)))\n    });\n    resolve();\n  } catch (e) {\n    console.error(e);\n    reject();\n  }\n});\n\nconst encryptAndPassDeck = async (dispatch, gameId, deck) => new Promise(async (resolve, reject) => {\n  try {\n    await dispatch({\n      type: ACTION_TYPES.PASS_SHUFFLED_DECK,\n      payload: api.passShuffledDeck(gameId, encryptCards(deck.map(card => card.encrypted)))\n    });\n    resolve();\n  } catch (e) {\n    console.error(e);\n    reject();\n  }\n});\n\nconst initialState = {\n  myPlayerIndex: -1,\n  loadingGameStatus: false,\n  loadingCardFragments: false,\n  messages: [],\n  game: {},\n  gameState: {},\n  cardCodewords: [],\n  deck: [],\n  cardsInPlayerHand: [[], [], []],\n  handsValue: [0, 0, 0],\n  playerBets: [],\n  playerMonies: [],\n  pendingMessages: [],\n  fulfilledMessages: [],\n  pendingActions: {},\n  sending: false,\n  resigning: false,\n  isReadyForNextRound: false,\n  error: null\n}\n\n\nconst reducer = (state = initialState, { type, payload, meta }) => {\n  switch (type) {\n    case PENDING(ACTION_TYPES.FETCH_STATUS):\n      return {\n        ...state,\n        loadingGameStatus: true,\n        error: null\n      }\n    case FULFILLED(ACTION_TYPES.FETCH_STATUS):\n      const { game, messages, game_state, deck, player_monies, player_bets, cards_in_player_hand, hands_value } = payload;\n      const cardsInPlayerHand = cards_in_player_hand.map(\n        playerHand => playerHand.map(cardInHand => ({\n          ...cardInHand,\n          revealValue: deck[cardInHand.card_index].reveal_value\n        }))\n      );\n      const myPlayerIndex = game.player_1 === auth.getCurrentUser().id ? 0 : 1;\n      const isReadyForNextRound = game_state.phrase === 0 ? false : state.isReadyForNextRound;\n      return {\n        ...state,\n        myPlayerIndex,\n        loadingGameStatus: false,\n        game,\n        messages,\n        gameState: game_state,\n        deck,\n        cardsInPlayerHand,\n        handsValue: hands_value,\n        playerMonies: player_monies,\n        playerBets: player_bets,\n        fulfilledMessages: [],\n        isReadyForNextRound\n      }\n    case REJECTED(ACTION_TYPES.FETCH_STATUS):\n      return {\n        ...state,\n        loadingGameStatus: false,\n        error: payload\n      }\n    case PENDING(ACTION_TYPES.POST_MESSAGE):\n      return {\n        ...state,\n        sending: true,\n        error: null,\n        pendingMessages: [...state.pendingMessages, meta.msg]\n      }\n    case FULFILLED(ACTION_TYPES.POST_MESSAGE):\n      return {\n        ...state,\n        sending: false,\n        pendingMessages: state.pendingMessages.filter(msg => msg.message !== meta.msg.message),\n        fulfilledMessages: [...state.fulfilledMessages, meta.msg]\n      }\n    case REJECTED(ACTION_TYPES.POST_MESSAGE):\n      return {\n        ...state,\n        sending: false,\n        pendingMessages: state.pendingMessages.filter(msg => msg.message !== meta.msg.message),\n        error: payload\n      }\n    case PENDING(ACTION_TYPES.RESIGN):\n      return {\n        ...state,\n        resigning: true,\n        error: null\n      }\n    case ACTION_TYPES.RESET:\n      return initialState;\n    case REJECTED(ACTION_TYPES.RESIGN):\n      return {\n        ...state,\n        resigning: false,\n        error: payload\n      }\n    case PENDING(ACTION_TYPES.PASS_SHUFFLED_DECK):\n      return {\n        ...state,\n        pendingActions: {\n          ...state.pendingActions,\n          [PENDING_TYPES.PASS_SHUFFLED_DECK]: true\n        }\n      }\n    case FULFILLED(ACTION_TYPES.PASS_SHUFFLED_DECK):\n      return {\n        ...state,\n        pendingActions: {\n          ...state.pendingActions,\n          [PENDING_TYPES.PASS_SHUFFLED_DECK]: false\n        }\n      }\n    case PENDING(ACTION_TYPES.PLACE_BET):\n      return {\n        ...state,\n        pendingActions: {\n          ...state.pendingActions,\n          [PENDING_TYPES.PLACE_BET]: true\n        }\n      }\n    case REJECTED(ACTION_TYPES.PLACE_BET):\n      return {\n        ...state,\n        pendingActions: {\n          ...state.pendingActions,\n          [PENDING_TYPES.PLACE_BET]: false\n        }\n      }\n    case FULFILLED(ACTION_TYPES.PLACE_BET):\n      return {\n        ...state,\n        playerBets: [\n          ...state.playerBets.filter(bet => bet.id !== meta.player),\n          {\n            id: meta.player,\n            amount: meta.amount\n          }\n        ],\n        pendingActions: {\n          ...state.pendingActions,\n          [PENDING_TYPES.PLACE_BET]: false\n        }\n      }\n    case PENDING(ACTION_TYPES.FETCH_FRAGMENTS):\n      return {\n        ...state,\n        loadingCardFragments: true\n      };\n    case FULFILLED(ACTION_TYPES.FETCH_FRAGMENTS):\n      if (!isEmpty(payload[0]) && !isEmpty(payload[1]) && isEmpty(state.cardCodewords)) {\n        return {\n          ...state,\n          loadingCardFragments: false,\n          cardCodewords: createCardCodeWords(payload[1 - state.myPlayerIndex])\n        }\n      }\n      else return {\n        ...state,\n        loadingCardFragments: false,\n      };\n    case REJECTED(ACTION_TYPES.FETCH_FRAGMENTS):\n      return {\n        ...state,\n        loadingCardFragments: false\n      };\n    case PENDING(ACTION_TYPES.HIT):\n    case PENDING(ACTION_TYPES.STAND):\n      return {\n        ...state,\n        sending: true\n      };\n    case FULFILLED(ACTION_TYPES.HIT):\n      return {\n        ...state,\n        sending: false,\n        cardsInPlayerHand: state.cardsInPlayerHand.map(\n          (playerHand, index) => index !== (state.myPlayerIndex + 1) || playerHand.length === meta.expectedHandSize\n            ? playerHand\n            : [...playerHand, { card_index: state.gameState.top_card_index, revealValue: \"\" }]\n        )\n      };\n    case FULFILLED(ACTION_TYPES.STAND):\n      return {\n        ...state,\n        sending: false,\n        gameState: {\n          ...state.gameState,\n          phrase: meta.expectedPhrase\n        }\n      };\n    case REJECTED(ACTION_TYPES.HIT):\n    case REJECTED(ACTION_TYPES.STAND):\n      return {\n        ...state,\n        sending: false\n      };\n\n    case PENDING(ACTION_TYPES.READY_FOR_NEXT_ROUND):\n      return {\n        ...state,\n        isReadyForNextRound: true\n      };\n    case REJECTED(ACTION_TYPES.READY_FOR_NEXT_ROUND):\n      return {\n        ...state,\n        isReadyForNextRound: false\n      };\n    default: return state;\n  }\n}\n\nexport default reducer;","import React from 'react';\nimport Slider from 'react-input-slider';\nimport { Button } from 'reactstrap';\n\nexport default class BetSlider extends React.PureComponent {\n  state = {\n    value: Math.min(this.props.maxValue, 10)\n  }\n\n  render() {\n    return (\n      <div className=\"d-flex align-items-center\">\n        <span style={{ minWidth: '3em' }} className=\"mr-3 text-right\">${this.state.value}</span>\n        <Slider\n          axis=\"x\"\n          x={this.state.value}\n          onChange={({ x }) => this.setState({ value: x })}\n          xmax={this.props.maxValue}\n          xmin={1}\n          styles={{\n            active: {\n              backgroundColor: '#007bff'\n            }\n          }}\n        />\n        <Button color=\"primary\" disabled={this.props.disabled} className=\"ml-3\" onClick={() => this.props.onSubmit(this.state.value)}>OK</Button>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\n\nconst RuleModal = props => (\n  <Modal isOpen={props.isOpen} toggle={props.onClose}>\n    <ModalHeader toggle={props.onClose}>\n      Rules\n    </ModalHeader>\n    <ModalBody>\n      This game is basically Blackjack (21) with some small changes:\n      <ul>\n        <li>Use only a single 52 deck. No reshuffle.</li>\n        <li>The goal is to have more money than your opponent at the end of the game.</li>\n        <li>\n          Game ends when the deck has run out of card:\n          <ul>\n            <li>At start of each round, if the deck has less than 6 cards, the game ends immediately.</li>\n            <li>Otherwise, when the deck runs out of card, the current round is scored immediately, no one (not even dealer) can receive any more card.</li>\n          </ul>\n        </li>\n        <li>Blackjack pays out 2:1, normal wins pay out 1:1.</li>\n        <li>Currently you can only hit or stand, no double up or split yet (sorry!)</li>\n      </ul>\n    </ModalBody>\n  </Modal>\n);\n\nexport default RuleModal;","import React from 'react';\n\nexport default class GameCard extends React.Component {\n  state = {\n    top: this.props.orinTop,\n    left: this.props.orinLeft\n  }\n\n  componentDidMount() {\n    setTimeout(() => this.setState({\n      top: this.props.top,\n      left: 0\n    }), 0)\n  }\n\n  render() {\n    const { top, left } = this.state;\n    const { cardName, style } = this.props;\n    return (\n      <div\n        className=\"game-card\"\n        style={{\n          ...style,\n          top,\n          left,\n          width: 100\n        }}\n      >\n        <div\n          className=\"game-card-inner\"\n          style={{\n            transform: cardName !== 'back' ? 'none' : 'rotateY(180deg)'\n          }}>\n          <img\n            className=\"game-card-face\"\n            width=\"100\"\n            alt={cardName} src={`${process.env.PUBLIC_URL}/images/cards/${cardName}.svg`}\n          />\n          <img\n            className=\"game-card-back\"\n            width=\"100\"\n            alt=\"card-back\" src={`${process.env.PUBLIC_URL}/images/cards/back.svg`}\n          />\n        </div>\n      </div>\n\n    )\n  }\n}","import React from 'react';\nimport { Row, Col, Form, Input, Button } from 'reactstrap';\nimport { withRouter } from 'react-router-dom';\nimport moment from 'moment';\nimport debounce from 'debounce';\nimport { connect } from 'react-redux';\nimport { isEmpty } from 'lodash';\n\nimport {\n  isPlayer1,\n  isPlayer2,\n  getGameStatus,\n  postMessage,\n  resign,\n  placeBet,\n  getCardFragments,\n  hit,\n  stand,\n  readyForNextRound,\n  reset,\n  PENDING_TYPES\n} from '../../Redux/game/game';\nimport auth from '../../blockchain/auth';\nimport BetSlider from './Components/BetSlider';\nimport RuleModal from './Components/RuleModal';\nimport GameCard from './Components/GameCard';\nimport { cardNames } from '../../blockchain/game-logic';\n\nclass Game extends React.Component {\n  state = {\n    message: '',\n    showingRules: false\n  }\n\n  componentDidMount() {\n    this.props.reset();\n    const gameId = Number(this.props.match.params.gameId);\n    this.getGameStatus = debounce(() => this.props.getGameStatus(gameId), 500);\n    this.getGameStatus();\n    this.preloadImages();\n  }\n\n  preloadImages = () => {\n    cardNames.forEach((picture) => {\n      const img = new Image();\n      img.src = `${process.env.PUBLIC_URL}/images/cards/${picture}.svg`;\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.loadingGameStatus && !this.props.loadingGameStatus) {\n      this.getGameStatus();\n\n      if (prevProps.messages.length === 0) this.refs.messages.scrollTop = this.refs.messages.scrollHeight;\n\n      if (isEmpty(prevProps.game) && !isEmpty(this.props.game)) {\n        if (isPlayer1(this.props.game) || isPlayer2(this.props.game)) this.props.getCardFragments(this.props.game.id);\n      }\n    }\n\n    if (prevProps.loadingCardFragments && !this.props.loadingCardFragments) {\n      if (isEmpty(this.props.cardCodewords)) this.props.getCardFragments(this.props.game.id);\n    }\n  }\n\n  toggleRules = () => this.setState({ showingRules: !this.state.showingRules });\n\n  onMessageChanged = e => this.setState({\n    message: e.target.value\n  })\n\n  postMessage = e => {\n    e.preventDefault();\n    this.props.postMessage(Number(this.props.match.params.gameId), this.state.message);\n    this.setState({ message: '' });\n  }\n\n  leaveGame = () => this.props.history.push('/lobby')\n\n  confirmResign = () => {\n    if (window.confirm(\"Are you sure you want to resign?\")) {\n      this.props.resign(Number(this.props.match.params.gameId));\n    }\n  }\n\n  placeBet = amount => this.props.placeBet(\n    Number(this.props.match.params.gameId),\n    this.props.gameState.round,\n    amount\n  );\n\n  hit = () => this.props.hit(Number(this.props.match.params.gameId));\n  stand = () => this.props.stand(Number(this.props.match.params.gameId));\n  readyForNextRound = () => this.props.readyForNextRound(Number(this.props.match.params.gameId));\n\n  renderBettingPanel = (playerMoney, playerBet) => {\n    const { pendingActions } = this.props;\n    const buttonDisabled = pendingActions[PENDING_TYPES.PLACE_BET] || !!playerBet;\n\n    return <BetSlider onSubmit={this.placeBet} disabled={buttonDisabled} maxValue={Math.min(50, playerMoney)} />\n  }\n\n  renderGameView = (currentUser) => {\n    const { cardsInPlayerHand, playerBets, playerMonies, game, gameState, handsValue, isReadyForNextRound, sending } = this.props;\n    return (\n      <div className=\"d-flex flex-column\" style={{ height: '100%' }}>\n        <div id=\"dealer-zone\" className=\"flex-grow-1 d-flex flex-column\">\n          <div className=\"text-center pb-3\">Deck: {52 - gameState.top_card_index} cards left</div>\n          <div className=\"d-flex flex-grow-1 flex-row-reverse justify-content-center align-items-start position-relative\">\n            {\n              gameState.phrase === 0\n                ? <h3 className=\"d-flex align-items-center\" style={{ height: '100%' }}><div className=\"text-center\">Round {gameState.round}<br />Place your bet</div></h3>\n                : cardsInPlayerHand[0].map((card, index) => (\n                  <GameCard\n                    key={card.card_index}\n                    cardName={card.revealValue || 'back'}\n                    top={index * 30}\n                    orinTop={-200}\n                    orinLeft={0}\n                    style={{ marginRight: `${index === 0 ? 0 : -80}px` }}\n                  />\n                ))\n            }\n            {gameState.phrase > 3 && <div className=\"text-dark\" style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', fontWeight: 700, fontSize: '3rem', textShadow: '0 0 5px #ffffff' }}>{handsValue[0]}</div>}\n          </div>\n        </div>\n        <div id=\"players-zone\" className=\"d-flex flex-grow-1\">\n          {Array.from({ length: 2 }).map((_, index) => index + 1).map(playerIndex => {\n            const playerHand = cardsInPlayerHand[playerIndex];\n            const playerId = game[`player_${playerIndex}`];\n            const playerName = game[`player_${playerIndex}_name`];\n            const playerBet = (playerBets.find(player => player.id === playerId) || {}).amount;\n            const playerMoney = (playerMonies.find(player => player.id === playerId) || {}).amount;\n            const isCurrentPlayer = playerId === currentUser.id;\n            const currentPlayerIsActivePlayer = playerIndex === gameState.phrase;\n            const playerHasUnknownCard = playerHand.some(card => card.revealValue === \"\")\n\n            return (\n              <div key={playerIndex} className=\"d-flex flex-column-reverse flex-grow-1 pb-5\">\n                <h4 className=\"text-center flex-0\">\n                  {`${playerName}${isCurrentPlayer ? ` (You)` : ''} - $${playerMoney}`}\n                </h4>\n                <div className=\"flex-0 d-flex justify-content-center align-items-center\" style={{ height: '3.5em' }}>\n                  {\n                    (gameState.phrase === 0 && isCurrentPlayer && !playerBet)\n                      ? this.renderBettingPanel(playerMoney, playerBet)\n                      : playerBet\n                        ? `Betting $${playerBet}`\n                        : ' '\n                  }\n                </div>\n                <div className=\"d-flex justify-content-center align-items-center\" style={{ height: '4.5em' }}>\n                  {\n                    isCurrentPlayer && currentPlayerIsActivePlayer && !playerHasUnknownCard && (\n                      <>\n                        <Button color=\"primary mx-1\" onClick={this.hit} disabled={sending}>Hit</Button>\n                        <Button color=\"primary mx-1\" onClick={this.stand} disabled={sending}>Stand</Button>\n                      </>\n                    )\n                  }\n                  {gameState.phrase > 3 && isCurrentPlayer && !isReadyForNextRound && (\n                    <Button className=\"mx-1\" color=\"primary\" onClick={this.readyForNextRound}>Next Round</Button>\n                  )}\n                </div>\n                <div className=\"d-flex justify-content-center align-items-end position-relative\">\n                  {\n                    playerHand.map((card, index) => (\n                      <GameCard\n                        key={card.card_index}\n                        cardName={card.revealValue || 'back'}\n                        top={-index * 30}\n                        orinTop={-window.innerHeight / 2 - 200}\n                        orinLeft={playerIndex === 1 ? '50%' : '-50%'}\n                        style={{ marginLeft: `${index === 0 ? 0 : -80}px` }}\n                      />\n                    ))\n                  }\n                  {gameState.phrase > 3 && <div className=\"text-dark\" style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', fontWeight: 700, fontSize: '3rem', textShadow: '0 0 5px #ffffff' }}>{handsValue[playerIndex]}</div>}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n\n  renderLoader = (phrase, player_1_name, player_2_name) => (\n    <div className=\"position-absolute d-flex flex-column justify-content-center align-items-center\" style={{ top: 0, left: 0, bottom: 0, right: 0 }} >\n      <div className=\"lds-ellipsis\">\n        <div />\n        <div />\n        <div />\n        <div />\n      </div>\n      <h4 className=\"px-5\">\n        {\n          phrase === -4 ? `${player_2_name} is shuffling the deck very carefully...`\n            : phrase === -3 ? `${player_1_name} is shuffling the deck very carefully...`\n              : phrase === -2 ? `Players are double-checking the deck...`\n                : `Game starting soon...`\n        }\n      </h4>\n    </div>\n  )\n\n  render() {\n    const { messages, fulfilledMessages, pendingMessages, game, gameState, resigning } = this.props;\n    const messagesToShow = [...messages, ...fulfilledMessages, ...pendingMessages];\n    const currentUser = auth.getCurrentUser();\n\n    return (\n      <>\n        <Row>\n          <Col lg=\"9\" className=\"py-3 position-relative\" style={{ height: '100vh' }}>\n            {!isEmpty(game) && (\n              <>\n                {gameState.phrase < 0 && this.renderLoader(gameState.phrase, game.player_1_name, game.player_2_name)}\n                {gameState.phrase >= 0 && this.renderGameView(currentUser)}\n\n                {game.finished !== -1 && (\n                  <div style={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, background: 'rgba(0,0,0,0.6)' }} className=\"d-flex justify-content-center align-items-center\">\n                    <div>Game has ended. Winner: {game.winner === 1 ? game.player_1_name : game.player_2_name}!</div>\n                  </div>\n                )}\n\n                <div className=\"position-absolute d-flex justify-content-between\" style={{ left: 10, right: 10, top: 10 }}>\n                  <Button color=\"outline-primary\" onClick={this.toggleRules}>? Rules ?</Button>\n                  {\n                    game.finished !== -1 || (game.player_1 !== currentUser.id && game.player_2 !== currentUser.id)\n                      ? (\n                        <Button color=\"outline-secondary\" onClick={this.leaveGame}>\n                          Leave Game\n                    </Button>\n                      ) : (\n                        <Button color=\"outline-secondary\" disabled={resigning} onClick={this.confirmResign}>\n                          Resign\n                    </Button>\n                      )\n                  }\n                </div>\n              </>\n            )}\n          </Col>\n          <Col lg=\"3\" className=\"d-flex flex-column justify-content-end py-3 col-lg-3\" style={{ maxHeight: '100vh', background: 'rgba(0,0,0,0.2)' }}>\n            <div className=\"flex-grow-1 d-flex flex-column justify-content-end\" style={{ overflow: 'hidden' }}>\n              <div style={{ overflow: 'auto' }} ref=\"messages\">\n                {\n                  messagesToShow.length > 0\n                    ? messagesToShow.map(message => (\n                      <p\n                        style={{\n                          wordBreak: 'break-word'\n                        }}\n                        key={message.timestamp}>\n                        <b className={message.author_name === currentUser.username ? 'text-primary' : 'text-secondary'}>[{moment(message.timestamp).fromNow()}] {message.author_name}</b>:<br />{message.message}\n                      </p>\n                    ))\n                    : <div className=\"text-muted\">Say something nice e.g. \"Good game, have fun!\"</div>\n                }\n              </div>\n            </div>\n            <Form className=\"flex-grow-0 mt-3\" onSubmit={this.postMessage}>\n              <Input type=\"text\" autoComplete=\"message\" placeholder=\"Chat...\" value={this.state.message} onChange={this.onMessageChanged} />\n            </Form>\n          </Col>\n        </Row>\n        <RuleModal isOpen={this.state.showingRules} onClose={this.toggleRules} />\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  getGameStatus,\n  postMessage,\n  resign,\n  reset,\n  placeBet,\n  getCardFragments,\n  hit,\n  stand,\n  readyForNextRound\n};\nconst mapAppStateToProps = ({ game }) => {\n  const {\n    sending,\n    loadingGameStatus,\n    loadingCardFragments,\n    cardCodewords,\n    resigning,\n    messages,\n    pendingMessages,\n    fulfilledMessages,\n    game: gameInfo,\n    gameState,\n    pendingActions,\n    playerBets,\n    playerMonies,\n    cardsInPlayerHand,\n    handsValue,\n    isReadyForNextRound\n  } = game;\n  return {\n    sending,\n    resigning,\n    loadingGameStatus,\n    loadingCardFragments,\n    cardCodewords,\n    game: gameInfo,\n    gameState,\n    playerBets,\n    playerMonies,\n    messages,\n    fulfilledMessages,\n    pendingMessages,\n    pendingActions,\n    cardsInPlayerHand,\n    handsValue,\n    isReadyForNextRound\n  }\n}\n\nexport default withRouter(connect(mapAppStateToProps, mapDispatchToProps)(Game));","import Game from './Game';\n\nexport default Game;","export const ACTION_TYPES = {\n  SET_NODE_LOCATION: 'config/SET_NODE_LOCATION'\n}\n\nexport const setNodeLocation = uri => ({\n  type: ACTION_TYPES.SET_NODE_LOCATION,\n  payload: uri\n});\n\n\nconst reducer = (state = {}, { type, payload, ...others }) => {\n  switch (type) {\n    case ACTION_TYPES.SET_NODE_LOCATION:\n      window.localStorage.setItem('nodeLocation', payload);\n      return {\n        ...state,\n        nodeLocation: payload\n      }\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","import React from 'react';\nimport { Row, Col, Card, CardBody, Form, FormGroup, Label, Input, Button } from 'reactstrap';\n\nimport blockchain from '../../blockchain/blockchain';\nimport auth from '../../blockchain/auth';\nimport { setNodeLocation } from '../../Redux/config/config';\nimport { connect } from 'react-redux';\n\nclass NodeLocationPrompt extends React.Component {\n  state = {\n    location: '',\n    loading: false,\n    success: true,\n  }\n\n  componentDidMount() {\n    const cachedLocation = window.localStorage.getItem('nodeLocation', '');\n    if (cachedLocation) {\n      this.setState({ location: cachedLocation }, this.initializeNodeLocation);\n    }\n  }\n\n  async initializeNodeLocation() {\n    this.setState({ loading: true, success: true });\n    const result = await blockchain.init(this.state.location);\n    if (result === \"pong\") {\n      if (process.env.NODE_ENV === 'production') await auth.loginFromSession();\n      this.props.setNodeLocation(this.state.location);\n    }\n    else {\n      this.setState({ loading: false, success: false });\n    }\n  }\n\n  registerLocation = e => {\n    e.preventDefault();\n    if (!this.state.location) return;\n    this.initializeNodeLocation();\n  }\n\n  onFieldChanged = e => this.setState({ [e.target.name]: e.target.value });\n\n  render() {\n    const { location } = this.state;\n\n    return (\n      <Row className=\"justify-content-center align-items-center\" style={{ height: '100vh' }}>\n        <Col className=\"m-auto\" style={{ paddingBottom: '20vh' }} sm=\"10\" md=\"6\" lg=\"5\" xl=\"4\">\n          <Card>\n            <CardBody>\n              {\n                this.state.loading ? (\n                  <div>Testing connection, please wait...</div>\n                ) : (\n                    <Form onSubmit={this.registerLocation}>\n                      <FormGroup>\n                        {!this.state.success && <div className=\"color-danger\">Cannot connect to server!</div>}\n                        <Label>Please enter node location:</Label>\n                        <Input type=\"text\" name=\"location\" placeholder=\"https://try.chromia.dev/node/#####/\" value={location} onChange={this.onFieldChanged} />\n                      </FormGroup>\n                      <div className=\"d-flex justify-content-end\">\n                        <Button color=\"primary\" type=\"submit\">Connect</Button>\n                      </div>\n                    </Form>\n                  )\n              }\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  setNodeLocation\n}\n\nexport default connect(null, mapDispatchToProps)(NodeLocationPrompt);","import NodeLocationPrompt from './NodeLocationPromp';\n\nexport default NodeLocationPrompt;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport { connect } from 'react-redux';\n\nimport auth from '../blockchain/auth';\nimport Login from './Login';\nimport Lobby from './Lobby';\nimport Game from './Game';\nimport NodeLocationPrompt from './NodeLocationPrompt';\n\nexport const PrivateRoute = ({ component: Component, ...props }) => (\n  <Route {...props} render={() => (\n    auth.isLoggedIn() ? <Component {...props} /> : <Redirect to=\"/\" />\n  )} />\n)\n\nclass Routes extends React.Component {\n  render() {\n    return (\n      <Router basename={process.env.NODE_ENV === 'development' ? '' : `rell-game`}>\n        {\n          this.props.nodeLocation\n            ? (\n              <Switch>\n                <PrivateRoute path=\"/lobby\" component={Lobby} />\n                <PrivateRoute path=\"/game/:gameId\" component={Game} />\n                <Route path=\"/\">\n                  <Login />\n                </Route>\n              </Switch>\n            )\n            : <NodeLocationPrompt />\n        }\n\n      </Router>\n    );\n  }\n}\n\nconst mapAppStateToProps = ({ config }) => ({ nodeLocation: config.nodeLocation });\n\nexport default connect(mapAppStateToProps)(Routes);","import { combineReducers } from \"redux\";\nimport config from \"./config/config\";\nimport lobby from './lobby/lobby';\nimport game from './game/game';\n\nexport default combineReducers({\n  config,\n  lobby,\n  game\n});\n","import React from 'react';\nimport './App.scss';\nimport { Provider as ReduxProvider } from \"react-redux\";\n\nimport Routes from './Routes/';\nimport { createReduxStore } from './Redux/store';\n\nconst reduxStore = createReduxStore();\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <ReduxProvider store={reduxStore}>\n          <Routes />\n        </ReduxProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { composeWithDevTools as composeWithReduxDevTools } from \"redux-devtools-extension\";\nimport reduxThunk from \"redux-thunk\";\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { createStore, applyMiddleware } from \"redux\";\n\nimport reducers from \"./reducers\";\n\nexport const createReduxStore = () => {\n  return createStore(\n    reducers,\n    {},\n    composeWithReduxDevTools(\n      applyMiddleware(reduxThunk, promiseMiddleware)\n    )\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import pcl from 'postchain-client';\nimport blockchain from './blockchain';\n\nconst auth = (function () {\n  let currentUser = {};\n\n  const register = async username => {\n    try {\n      const user = pcl.util.makeKeyPair();\n      const { pubKey, privKey } = user;\n      const rq = blockchain.getGtx().newTransaction([pubKey]);\n      rq.addOperation('register', pubKey, username);\n      rq.sign(privKey, pubKey);\n\n      await rq.postAndWaitConfirmation();\n\n      return await login(privKey.toString('hex'));\n    } catch (e) {\n      console.error(e);\n      return {};\n    }\n  }\n\n  const loginFromSession = async () => {\n    const session = sessionStorage.getItem('userLogin');\n    if (session) await auth.login(session);\n  }\n\n  const login = async privKeyAsText => {\n    try {\n      const privKey = Buffer.from(privKeyAsText, 'hex');\n      const pubKey = pcl.util.createPublicKey(privKey);\n      const pubKeyAsText = pubKey.toString('hex');\n      const { id, username } = await blockchain.getGtx().query(\"get_user\", {\n        user_pubkey: pubKeyAsText\n      });\n\n      currentUser = {\n        id,\n        username,\n        pubKey,\n        privKey\n      };\n\n      sessionStorage.setItem('userLogin', privKeyAsText);\n\n      return {\n        username,\n        pubKey: pubKeyAsText,\n        privKey: privKeyAsText\n      };\n    } catch (e) {\n      console.error(e);\n      return {};\n    }\n  }\n\n  const logout = () => {\n    currentUser = {};\n    sessionStorage.removeItem('userLogin');\n  }\n\n  const isLoggedIn = () => !!currentUser.privKey;\n\n  const getCurrentUser = () => ({ ...currentUser });\n\n  return {\n    register,\n    login,\n    loginFromSession,\n    logout,\n    isLoggedIn,\n    getCurrentUser\n  }\n})();\n\nexport default auth;\n\n// eab361efa1b15ec1ba5961e50dca5e30b1be47a0f4489b6bb22b6131811a9572\n// 8458c8986de343b967928631ec00b8bd7b4bff4c32ee10d8a085975ee922abc0\n\n// 99554f606d45ee3dba7695ecf592ac2210f7ba7718dbc5a781925c0aae3764a1\n// 15b5b36dbafdf787955393f5b90f736d18d825e17dd5a8a8f17596fc1b2fc607\n// 241059bfa6631a9d27af918421cbbed853d3ceddf21a9ea5e2f13a72a72c0a0d"],"sourceRoot":""}